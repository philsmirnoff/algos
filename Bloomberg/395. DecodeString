394. Decode String
Medium
11.5K
517
company
Bloomberg
company
TikTok
company
Google
Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.



Example 1:

Input: s = "3[a]2[bc]"
Output: "aaabcbc"
Example 2:

Input: s = "3[a2[c]]"
Output: "accaccacc"
Example 3:

Input: s = "2[abc]3[cd]ef"
Output: "abcabccdcdcdef"


Constraints:

1 <= s.length <= 30
s consists of lowercase English letters, digits, and square brackets '[]'.
s is guaranteed to be a valid input.
All the integers in s are in the range [1, 300].

/**
 * @param {string} s
 * @return {string}
 */
var decodeString = function(s) {
  let stack = []; // create an empty stack to store the decoded string and the number of repetitions
  let currentString = ""; // create an empty string to store the current substring
  let currentNum = 0; // create a variable to store the current number of repetitions

  // loop through each character in the input string
  for (let char of s) {
    if (char === "[") {
      // if the current character is "[", push the current substring and the number of repetitions onto the stack
      stack.push(currentString);
      stack.push(currentNum);
      currentString = "";
      currentNum = 0;
    } else if (char === "]") {
      // if the current character is "]", decode the substring by repeating it the specified number of times
      let num = stack.pop();
      let prevString = stack.pop();
      currentString = prevString + currentString.repeat(num);
    } else if (char >= "0" && char <= "9") {
      // if the current character is a digit, update the current number of repetitions
      currentNum = currentNum * 10 + parseInt(char);
    } else {
      // if the current character is a letter, append it to the current substring
      currentString += char;
    }
  }

  return currentString;
};
