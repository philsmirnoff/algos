56. Merge Intervals
Medium
20.4K
687
company
Amazon
company
Google
company
Facebook
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.



Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

const merge = (intervals) => {
 // sort the inetrvals based on the starting time
 intervals.sort((a, b) => (a[0] - b[0]))
 // initilize array with the interval on index 0
 const merged = [intervals[0]]

 // iterate overt the intervals starting from index 1
 for (let i = 1; i < intervals.length; i++) {
     let lastMerged = merged[merged.length - 1]
     let current = intervals[i]

     if (current[0] <= lastMerged[1]) {
            // if the current intervals start time is less or equal lastMerged intervals end time that means its overlapping
       // adjust the end time of the last merged interval
         lastMerged[1] = Math.max(current[1], lastMerged[1])
     } else {
         // else
            // push the interval into the result array
         merged.push(current)
     }
 }
// return the array
 return merged
}

