Moving Average from Data Stream

Solution
Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.

Implement the MovingAverage class:

// MovingAverage(int size) Initializes the object with the size of the window size.
// double next(int val) Returns the moving average of the last size values of the stream.


// Example 1:

// Input
// ["MovingAverage", "next", "next", "next", "next"]
// [[3], [1], [10], [3], [5]]
// Output
// [null, 1.0, 5.5, 4.66667, 6.0]

// Explanation
// MovingAverage movingAverage = new MovingAverage(3);
// movingAverage.next(1); // return 1.0 = 1 / 1
// movingAverage.next(10); // return 5.5 = (1 + 10) / 2
// movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3
// movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3

class MovingAverage {
  constructor(size) {
    this.size = size; // initialize the window size
    this.window = []; // initialize an empty array to store the values in the window
  }

  next(val) {
    if (this.window.length === this.size) { // if the window is full
      this.window.shift(); // remove the oldest value from the window
    }
    this.window.push(val); // add the new value to the window
    const sum = this.window.reduce((acc, cur) => acc + cur); // calculate the sum of the values in the window
    return sum / this.window.length; // return the average of the values in the window
  }
}


// For the Moving Average implementation, the next method has a time complexity of O(1) because it uses only constant-time operations, namely push, shift, reduce, and division.

// The space complexity of the Moving Average implementation is also O(size) because the array stores at most size values.
