  Maximum Subarray

Solution
Given an integer array nums, find the subarray with the largest sum, and return its sum.



Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.


Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104


Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

const maxSubArray = (nums) => { // defines a function that takes an array of numbers as input
    if (nums.length === 1) return nums[0]; // if the array contains only one element, return that element

    let maxValue = nums[0]; // initialize the maximum sum as the first element of the array
    let accNum = nums[0]; // initialize a variable to keep track of the accumulated sum

    for (let i = 1; i < nums.length; i++) { // loop through the array starting from the second element
        let calc = Math.max(nums[i], accNum + nums[i]) // calculate the maximum sum of the current element and the accumulated sum
        if (calc > maxValue) { // if the calculated sum is greater than the current maximum sum
            maxValue = calc // update the maximum sum
        }
        accNum = calc // update the accumulated sum
    }
    return maxValue // return the maximum sum
}
