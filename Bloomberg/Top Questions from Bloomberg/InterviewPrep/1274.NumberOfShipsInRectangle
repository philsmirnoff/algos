1274. Number of Ships in a Rectangle
Hard
500
54
company
Bloomberg
(This problem is an interactive problem.)

Each ship is located at an integer point on the sea represented by a cartesian plane, and each integer point may contain at most 1 ship.

You have a function Sea.hasShips(topRight, bottomLeft) which takes two points as arguments and returns true If there is at least one ship in the rectangle represented by the two points, including on the boundary.

Given two points: the top right and bottom left corners of a rectangle, return the number of ships present in that rectangle. It is guaranteed that there are at most 10 ships in that rectangle.

Submissions making more than 400 calls to hasShips will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.



Example :


Input:
ships = [[1,1],[2,2],[3,3],[5,5]], topRight = [4,4], bottomLeft = [0,0]
Output: 3
Explanation: From [0,0] to [4,4] we can count 3 ships within the range.
Example 2:

Input: ans = [[1,1],[2,2],[3,3]], topRight = [1000,1000], bottomLeft = [0,0]
Output: 3


 var countShips = function(sea, topRight, bottomLeft) {
    // Check if there are no ships in the current rectangle
    if (!sea.hasShips(topRight, bottomLeft)) {
        return 0; // No ships in this rectangle
    }

    // Check if there's only one cell and it has a ship
    if (topRight[0] === bottomLeft[0] && topRight[1] === bottomLeft[1]) {
        return 1; // Only one cell and it has a ship
    }

    // Calculate midpoints to divide the rectangle into quadrants
    const midX = Math.floor((topRight[0] + bottomLeft[0]) / 2);
    const midY = Math.floor((topRight[1] + bottomLeft[1]) / 2);

    // Recursively count ships in all four quadrants and sum them up
    return (
        countShips(sea, [midX, midY], bottomLeft) + // Lower left quadrant
        countShips(sea, topRight, [midX + 1, midY + 1]) + // Upper right quadrant
        countShips(sea, [midX, topRight[1]], [bottomLeft[0], midY + 1]) + // Upper left quadrant
        countShips(sea, [topRight[0], midY], [midX + 1, bottomLeft[1]]) // Lower right quadrant
    );
};

https://www.youtube.com/watch?v=fZXyxGTqlgQ&t=896s

// soltion number 2
const whereAreTheShips = (sea, topRight, bottomLeft) => {
    let ships = 0
    let [top, right] = topRight  // [4,4]
    let [bottom, left] = bottomLeft //[0,0]
    // bounds
    if(top < bottom || left > right || !sea.hasShips(topRight,bottomLeft)) {
        return 0
    }
    // found your ship
    if (top === bottom && left === right) return 1

    let horizontal = Math.floor(bottom + (top - bottom) / 2 )//no overflow
    let vertical = Math.floor(left + (right-left) / 2)


    // console.log("bottomleft",[horizontal, vertical], bottomLeft)
    ships+=whereAreTheShips(sea, [horizontal, vertical], bottomLeft)
    // console.log("bottom right",[top, vertical], [horizontal+1, left])
    ships+=whereAreTheShips(sea, [top, vertical], [horizontal+1, left])
    // console.log("top left", [horizontal, right], [bottom,vertical+1])
    ships+=whereAreTheShips(sea, [horizontal, right], [bottom,vertical+1])
    // console.log("top right", topRight, [horizontal + 1, vertical + 1])
    ships+=whereAreTheShips(sea, topRight, [horizontal + 1, vertical + 1])

    return ships
}

var countShips = function(sea, topRight, bottomLeft){
    return whereAreTheShips(sea, topRight, bottomLeft)
}
