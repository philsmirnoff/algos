"abbbaaca", 3

stack = [[c, 1], [a, 1]]

result = "ca"

1209. Remove All Adjacent Duplicates in String II
Medium
5.5K
106
company
Bloomberg
company
Microsoft
company
Facebook
You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.



Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.
Example 2:

Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation:
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"
Example 3:

Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"


1. create a stack
2. iterate through the string
3. if the stack is not empty and the last element of the stack is the same as the current character, increment the count of the last element of the stack
4. else, push the current character and 1 into the stack
5. if the count of the last element of the stack is equal to k, pop the last element of the stack
6. create a result string
7. iterate through the stack
8. for each element in the stack, add the character to the result string the number of times equal to the count
9. return the result string


const removeDuplicates = (s, k) => {
    let stack = [];

    for (let char of s) {
        if (stack.length > 0 && stack[stack.length - 1][0] === char) {
            stack[stack.length - 1][1] += 1
        } else {
            stack.push([char, 1])
        }

        if (stack[stack.length - 1][1] === k) {
            stack.pop()
        }
    }



    let result = '';
    for (let [char, count] of stack) {
        result += char.repeat(count)
    }
    return result
}
