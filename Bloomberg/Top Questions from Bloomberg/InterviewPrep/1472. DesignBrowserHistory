1472. Design Browser History
Medium
3.6K
209
company
Roblox
company
Bloomberg
company
Amazon
You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.

Implement the BrowserHistory class:

BrowserHistory(string homepage) Initializes the object with the homepage of the browser.
void visit(string url) Visits url from the current page. It clears up all the forward history.
string back(int steps) Move steps back in history. If you can only return x steps in the history and steps > x, you will return only x steps. Return the current url after moving back in history at most steps.
string forward(int steps) Move steps forward in history. If you can only forward x steps in the history and steps > x, you will forward only x steps. Return the current url after forwarding in history at most steps.


Example:

Input:
["BrowserHistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]
[["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]
Output:
[null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"]

Explanation:
BrowserHistory browserHistory = new BrowserHistory("leetcode.com");
browserHistory.visit("google.com");       // You are in "leetcode.com". Visit "google.com"
browserHistory.visit("facebook.com");     // You are in "google.com". Visit "facebook.com"
browserHistory.visit("youtube.com");      // You are in "facebook.com". Visit "youtube.com"
browserHistory.back(1);                   // You are in "youtube.com", move back to "facebook.com" return "facebook.com"
browserHistory.back(1);                   // You are in "facebook.com", move back to "google.com" return "google.com"
browserHistory.forward(1);                // You are in "google.com", move forward to "facebook.com" return "facebook.com"
browserHistory.visit("linkedin.com");     // You are in "facebook.com". Visit "linkedin.com"
browserHistory.forward(2);                // You are in "linkedin.com", you cannot move forward any steps.
browserHistory.back(2);                   // You are in "linkedin.com", move back two steps to "facebook.com" then to "google.com". return "google.com"
browserHistory.back(7);                   // You are in "google.com", you can move back only one step to "leetcode.com". return "leetcode.com"



// we can solve it using an array, where index will be the current position and we will store the url at that position
// when we visit any url, we will increment the index and store the url at that index
// when we move back, we will decrement the index and return the url at that index
// when we move forward, we will increment the index and return the url at that index


1. create a constructor that takes in the homepage and initialize the history array with the homepage and curr to 0
2. visit function will take in a url and we will slice the history array from 0 to curr + 1 and store it in history
3. we will push the url to the history array and increment the curr
4. back function will take in steps and we will decrement the curr by steps and return the url at that index
4a. if curr - steps is less than 0, we will return the url at index 0
5. forward function will take in steps and we will increment the curr by steps and return the url at that index
5a. if curr + steps is greater than the length of history array, we will return the url at the last index


class BrowserHistory {
  constructor(homepage) {
    this.history = [homepage];
    this.curr = 0;
  }

  visit(url) {
    this.histpry = this.history.slice(0, this.curr + 1);
    this.history.push(url);
    this.curr++;
  }

  back(steps) {
    this.curr = Math.max(this.curr - steps, 0);
    return this.history[this.curr];
  }

  forward(steps) {
    this.curr = Math.min(this.curr + steps, this.history.length - 1);
    return this.history[this.curr];
  }
}
