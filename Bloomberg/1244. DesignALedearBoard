Medium
715
92
company
Bloomberg
company
Google
company
Amazon
Design a Leaderboard class, which has 3 functions:

addScore(playerId, score): Update the leaderboard by adding score to the given player's score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given score.
top(K): Return the score sum of the top K players.
reset(playerId): Reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). It is guaranteed that the player was added to the leaderboard before calling this function.
Initially, the leaderboard is empty.



Example 1:

Input:
["Leaderboard","addScore","addScore","addScore","addScore","addScore","top","reset","reset","addScore","top"]
[[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]]
Output:
[null,null,null,null,null,null,73,null,null,null,141]

Explanation:
Leaderboard leaderboard = new Leaderboard ();
leaderboard.addScore(1,73);   // leaderboard = [[1,73]];
leaderboard.addScore(2,56);   // leaderboard = [[1,73],[2,56]];
leaderboard.addScore(3,39);   // leaderboard = [[1,73],[2,56],[3,39]];
leaderboard.addScore(4,51);   // leaderboard = [[1,73],[2,56],[3,39],[4,51]];
leaderboard.addScore(5,4);    // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]];
leaderboard.top(1);           // returns 73;
leaderboard.reset(1);         // leaderboard = [[2,56],[3,39],[4,51],[5,4]];
leaderboard.reset(2);         // leaderboard = [[3,39],[4,51],[5,4]];
leaderboard.addScore(2,51);   // leaderboard = [[2,51],[3,39],[4,51],[5,4]];
leaderboard.top(3);           // returns 141 = 51 + 51 + 39;


Leaderboard.prototype.addScore = function(playerId, score) {
    if (!this.scores.has(playerId)) {
        this.scores.set(playerId, 0); // Initialize the player's score to 0 if not present.
        this.players.push(playerId); // Add the player ID to the players array.
    }
    this.scores.set(playerId, this.scores.get(playerId) + score); // Add the provided score to the player's total score.
    return;
};

Leaderboard.prototype.top = function(K) {
    this.players.sort((a, b) => this.scores.get(b) - this.scores.get(a)); // Sort players array based on scores in descending order.

    let i = 0;
    let sum = 0;

    while (i < K) {
        const player = this.players[i++]; // Get the player ID at the current index.
        sum += this.scores.get(player); // Add the player's score to the sum.
    }

    return sum; // Return the sum of the top K players' scores.
};

Leaderboard.prototype.reset = function(playerId) {
    this.scores.set(playerId, 0); // Reset the player's score to 0.
};


// chatgtp solutions
class Leaderboard {
    constructor() {
        // Create a map to store player scores with playerId as keys and scores as values.
        this.scores = new Map();
    }

    addScore(playerId, score) {
        if (this.scores.has(playerId)) {
            // If player already exists, add the new score to the existing score.
            this.scores.set(playerId, this.scores.get(playerId) + score);
        } else {
            // If player doesn't exist, add the player with the given score.
            this.scores.set(playerId, score);
        }
    }

    top(K) {
        // Get an array of all player scores and sort them in descending order.
        const sortedScores = [...this.scores.values()].sort((a, b) => b - a);

        // Sum up the top K scores.
        let sum = 0;
        for (let i = 0; i < K && i < sortedScores.length; i++) {
            sum += sortedScores[i];
        }

        return sum;
    }

    reset(playerId) {
        // Reset the player's score to 0 or remove the player from the scores map.
        this.scores.delete(playerId);
    }
}

// Example usage
const leaderboard = new Leaderboard();
leaderboard.addScore(1, 73);
leaderboard.addScore(2, 56);
leaderboard.addScore(3, 39);
leaderboard.addScore(4, 51);
leaderboard.addScore(5, 4);
console.log(leaderboard.top(1)); // Output: 73
leaderboard.reset(1);
leaderboard.reset(2);
leaderboard.addScore(2, 51);
console.log(leaderboard.top(3)); // Output: 141
