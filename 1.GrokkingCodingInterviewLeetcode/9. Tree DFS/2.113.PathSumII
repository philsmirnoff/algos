113. Path Sum II
Medium
7.7K
149
company
TikTok
company
Amazon
company
Facebook
Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.



Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22


const pathSum = (root, targetSum) => {
    const allPaths = []
    const currPath = []

    dfs(root, targetSum, currPath, allPaths)
    return allPaths
}

const dfs = (currNode, targetSum, currPath, allPaths) => {
    if (currNode === null) return
    currPath.push(currNode.val)

    if (currNode.val === targetSum && currNode.left === null && currNode.right === null) {
        allPaths.push([...currPath])
    } else {
        dfs(currNode.left, targetSum - currNode.val, currPath, allPaths) || dfs(currNode.right, targetSum - currNode.val, currPath, allPaths)
    }

    currPath.pop()
}
