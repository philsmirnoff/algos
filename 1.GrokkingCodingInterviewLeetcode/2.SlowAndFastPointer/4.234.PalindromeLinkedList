234. Palindrome Linked List
Easy
15.5K
835
company
Amazon
company
Facebook
company
Apple
Given the head of a singly linked list, return true if it is a
palindrome
 or false otherwise.



Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false

Solution #1: grokkin solution:
As we know, a palindrome LinkedList will have nodes values that read the same backward or forward. This means that if we divide the LinkedList into two halves, the node values of the first half in the forward direction should be similar to the node values of the second half in the backward direction. As we have been given a Singly LinkedList, we canâ€™t move in the backward direction. To handle this, we will perform the following steps:

We can use the Fast & Slow pointers method similar to Middle of the LinkedList to find the middle node of the LinkedList.
Once we have the middle of the LinkedList, we will reverse the second half.
Then, we will compare the first half with the reversed second half to see if the LinkedList represents a palindrome.
Finally, we will reverse the second half of the LinkedList again to revert and bring the LinkedList back to its original form.


class Node {
  constructor(value, next = null) {
    this.value = value;
    this.next = next;
  }
}


class Solution {

  isPalindrome(head) {
    if (head === null || head.next === null) {
      return true;
    }

    // find middle of the LinkedList
    let slow = head, fast = head;
    while ((fast !== null && fast.next !== null)) {
      slow = slow.next;
      fast = fast.next.next;
    }

    let headSecondHalf = this.reverse(slow); // reverse the second half
    // store the head of reversed part to revert back later
    let copyHeadSecondHalf = headSecondHalf;

    // compare the first and the second half
    while ((head !== null && headSecondHalf !== null)) {
      if (head.val !== headSecondHalf.val) {
        break; // not a palindrome
      }

      head = head.next;
      headSecondHalf = headSecondHalf.next;
    }
    this.reverse(copyHeadSecondHalf); // revert the reverse of the second half

    if (head === null || headSecondHalf === null) { // if both halves match
      return true;
    }

    return false;
  }

  reverse (head) {
    let prev = null;
    while (head !== null) {
      let next = head.next;
      head.next = prev;
      prev = head;
      head = next;
    }
    return prev;
  }
}

const sol = new Solution();
const head = new Node(2);
head.next = new Node(4);
head.next.next = new Node(6);
head.next.next.next = new Node(4);
head.next.next.next.next = new Node(2);

console.log(`Is palindrome: ${sol.isPalindrome(head)}`);

head.next.next.next.next.next = new Node(2);
console.log(`Is palindrome: ${sol.isPalindrome(head)}`);


Solution #2. using array

var isPalindrome = function(head) {
    let arr = []
    while(head) {
        arr.push(head.val)
        head = head.next
    }
    return arr.join('') == arr.reverse().join('')
};


Solution #3: using fast and slow pointer
//  Intuition
// Find the middle of the linked list.
// Reverse the second half of the linked list.
// Compare the first half of the linked list to the reversed second half.
// If they are equal, the linked list is a palindrome. Otherwise, it is not a palindrome.
// Approach
// Use a slow and fast pointer to find the middle of the linked list.
// Reverse the second half of the linked list.
// Compare the first half of the linked list with the reversed second half.
// Return true if all the elements in the first half are equal to the corresponding elements in the reversed second half, or false otherwise.
// Complexity
// Time complexity:
// O(1)O(1)O(1)

// Space complexity:
// O(n)O(n)O(n)
var isPalindrome = function(head) {
    let slow = head
    let fast = head
    while (fast !== null && fast.next !== null) {
        slow = slow.next
        fast = fast.next.next
    }

    // reverse the second haf
    let prev = null
    let curr = slow

    while (curr) {
        let next = curr.next
        curr.next = prev
        prev = curr
        curr = next
    }

    let p1 = head
    let p2 = prev
    while (p2) {
        if (p1.val !== p2.val) return false;
        p1 = p1.next;
        p2 = p2.next;
    }

    return true;
};
