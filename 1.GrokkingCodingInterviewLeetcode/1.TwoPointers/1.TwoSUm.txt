// 1. Two Sum
// Easy
// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

// You may assume that each input would have exactly one solution, and you may not use the same element twice.

// You can return the answer in any order.



// Example 1:

// Input: nums = [2,7,11,15], target = 9
// Output: [0,1]
// Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
// Example 2:

// Input: nums = [3,2,4], target = 6
// Output: [1,2]
// Example 3:

// Input: nums = [3,3], target = 6
// Output: [0,1]


// Grokking version using two pointers (since in the grokking arr is sorted)

class Solution {
  search(arr, targetSum) {
    // TODO: Write your code here
    let left = 0;
    let right = arr.length - 1;

    while (left < right) {
      let currentSum = arr[left] + arr[right]

      if (currentSum === targetSum) {
        return [left, right]
      } else if (currentSum > targetSum) {
        right--
      } else {
        left++
      }


    }
    return [-1, -1];
  }
}


// Leetcode version the array is not sorted

const twoSum = (nums, target) => {
  let hashmap = {}
  for (let i = 0; i < nums.length; i++) {
      let num = nums[i]
      let complementPair = target - num

      if (complementPair in hashmap) return [ hashmap[complementPair], i]

      hashmap[num] = i
  }
}
