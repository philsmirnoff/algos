https://leetcode.com/problems/reverse-linked-list/

206. Reverse Linked List
Easy

Given the head of a singly linked list, reverse the list, and return the reversed list.


Solution
To reverse a LinkedList, we need to reverse one node at a time. We will start with a variable current which will initially point to the head of the LinkedList and a variable previous which will point to the previous node that we have processed; initially previous will point to null.

In a stepwise manner, we will reverse the current node by pointing it to the previous before moving on to the next node. Also, we will update the previous to always point to the previous node that we have processed.


Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []


class Node {
  constructor(value, next = null) {
    this.value = value;
    this.next = next;
  }

  print_list() {
    let temp = this;
    while (temp !== null) {
      process.stdout.write(`${temp.value} `);
      temp = temp.next;
    }
    console.log();
  }
}

class Solution {
  reverse(head) {
    let current = head,
      previous = null;
    while (current !== null) {
      let next = current.next; // temporarily store the next node
      current.next = previous; // reverse the current node
      // before we move to the next node, point previous to the current node
      previous = current;
      current = next; // move on the next node
    }
    return previous;
  }
}


leetcode solution:
var reverseList = function(head) {
    // lets point current navigator to head, and set prev to null
    let curr = head;
    let prev = null;


    // let iterate through the linked list untill we hit the null
    while(curr !== null) {
        // save the reference pointer
        let holdNext = curr.next;
        // reverse that pointer
        curr.next = prev;
        // move previous pointer forward
        prev = curr;
        // no we need to move curr forward
        curr = holdNext;

    }
    // we need to return prev, not curr because it will retun null
    return prev
};
