https://leetcode.com/problems/reverse-linked-list-ii/

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.



Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]


Solution
The problem follows the In-place Reversal of a LinkedList pattern. We can use a similar approach as discussed in Reverse a LinkedList. Here are the steps we need to follow:

Skip the first p-1 nodes, to reach the node at position p.
Remember the node at position p-1 to be used later to connect with the reversed sub-list.
Next, reverse the nodes from p to q using the same approach discussed in Reverse a LinkedList.
Connect the p-1 and q+1 nodes to the reversed sub-list.
class Node {
  constructor(value, next = null) {
    this.value = value;
    this.next = next;
  }

  print_list() {
    let temp = this;
    while (temp !== null) {
      process.stdout.write(`${temp.value} `);
      temp = temp.next;
    }
    console.log();
  }
}


class Solution {

  reverse(head, p, q) {
    if (p === q) {
      return head;
    }

    // after skipping 'p-1' nodes, current will point to 'p'th node
    let current = head,
    previous = null;
    let i = 0;
    while (current !== null && i < p - 1) {
      previous = current;
      current = current.next;
      i += 1;
    }

    // we are interested in three parts of the LinkedList, the part before index 'p',
    // the part between 'p' and 'q', and the part after index 'q'
    const last_node_of_first_part = previous;
    // after reversing the LinkedList 'current' will become the last node of the sub-list
    const last_node_of_sub_list = current;
    let next = null; // will be used to temporarily store the next node

    i = 0;
    // reverse nodes between 'p' and 'q'
    while (current !== null && i < q - p + 1) {
      next = current.next;
      current.next = previous;
      previous = current;
      current = next;
      i += 1;
    }

    // connect with the first part
    if (last_node_of_first_part !== null) {
      // 'previous' is now the first node of the sub-list
      last_node_of_first_part.next = previous;
      // this means p === 1 i.e., we are changing the first node (head) of the LinkedList
    } else {
      head = previous;
    }

    // connect with the last part
    last_node_of_sub_list.next = current;
    return head;
  }
}

leetcoe solution:
var reverseBetween = function(head, left, right) {
    // create a dummy node and link it to the head of the given list
  let dummy = new ListNode(0);
  dummy.next = head;
  let pre = dummy;

  // move the pre pointer to the node just before the start of the reversal
  for (let i = 0; i < left - 1; i++) {
    pre = pre.next;
  }

  // set the start pointer to the first node of the reversal
  let start = pre.next;
  // set the then pointer to the node following start
  let then = start.next;

  // loop over the nodes that need to be reversed
  for (let i = 0; i < right - left; i++) {
    // unlink then from the rest of the list and link it back to the reversed portion
    start.next = then.next;
    then.next = pre.next;
    pre.next = then;
    // move the then pointer to the next node in the original list
    then = start.next;
  }

  // return the next node of the dummy node, which points to the head of the reversed list
  return dummy.next;
};
