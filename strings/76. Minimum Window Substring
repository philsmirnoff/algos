76. Minimum Window Substring
Hard

10228

535

Add to List

Share
Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

A substring is a contiguous sequence of characters within the string.



Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.


Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.


Follow up: Could you find an algorithm that runs in O(m + n) time?


explanation:

https://www.youtube.com/watch?v=PzAHfUY6GGk


/**
 * @param {string} s
 * @param {string} t
 * @return {string}
 */
const minWindow = function(s, t) {
  // initialize variables
  let charCount = t.length;
  let minLength = Number.MAX_VALUE;
  let minStartIndex = 0;
  const char = {}

  // create a map of the characters of t
  for (let i = 0; i < t.length; i++) {
    const curr = t[i];
    char[curr] = (char[curr] || 0) + 1;
  }

  // this sets conditional for 1st pointer
  for (let l = 0, r = 0; r < s.length;) {
    // first pointer
    // char[s[r]] is the number of characters left for the character at first pointer
      if (char[s[r]] > 0) charCount--
    char[s[r]]--;
    r++;

    // this sets conditional for 2nd pointer
    while (charCount === 0) {
      // check if current window is less than the minimum length
      if ((r -l) < minLength) {
        minLength = r - l;
        minStartIndex = l;
      }

      // second pointer
      char[s[l]]++
      if (char[s[l]] > 0) charCount++;
      l++
    }
  }
  // return empty string if no valid candidate
  // otherwise return smallest substring
  return minLength === Number.MAX_VALUE
  ? ''
  : s.substr(minStartIndex, minLength)
}
