3. Longest Substring Without Repeating Characters
Medium

23558

1057

Add to List

Share
Given a string s, find the length of the longest substring without repeating characters.



Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.



 /**
 * @param {string} s
 * @return {number}
 */
var lengthOfLongestSubstring = function(s) {
//     let lastSeen = {};
//     let longest = [0, 1]
//     let startIdx = 0;

//     for (let i = 0; i < s.length; i++) {
//         const char = s[i];
//         // we will check if there is char in the map
//         if (char in lastSeen) {
//             startIdx = Math.max(startIdx, lastSeen[char] + 1)
//         }

//         if (longest[1] - longest[0] < i + 1 - startIdx) {
//             longest = [startIdx, i + 1]
//         }
//         lastSeen[char] = i
//     }
//     return s.slice(longest[0], longest[1]);
    // Sliding window
    let max = 0
    const soFar = {}
    let windowStart = 0;
    for (let windowEnd = 0; windowEnd < s.length; windowEnd++) {
        let rightChar = s[windowEnd]
        soFar[rightChar] = soFar[rightChar] + 1 || 1

        while (soFar[rightChar] > 1) {
            let leftChar = s[windowStart]
            if (soFar[leftChar] > 1)  {
               soFar[leftChar]--;
            } else {
                delete soFar[leftChar]
            }
            windowStart++
        }
        max = Math.max(max, (windowEnd - windowStart) + 1)
    }
    return max;
}
