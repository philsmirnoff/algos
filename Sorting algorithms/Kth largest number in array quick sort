var findKthLargest = function(nums, k) {

    const quickSort = (arr, left, right) => {
        if(left >= right) return;
        let index = partition(arr, left, right);

        quickSort(arr, left, index - 1);
        quickSort(arr, index, right);
    }

    const partition = (arr, l, r) => {
        let pivot = arr[Math.floor((r + l) / 2)];

        while (l <= r) {
            while (arr[l] > pivot) l++;
            while (arr[r] < pivot) r--;

            if (l <= r) {
                [arr[l], arr[r]] = [arr[r], arr[l]];
                l++;
                r--;
            }
        }

        return l;
    }

    quickSort(nums, 0, nums.length-1);
    return nums[k - 1];
};



/// quickslelect"
var findKthLargest = function(nums, k) {
  function swap (i, j) {
      [nums[i], nums[j]] = [nums[j], nums[i]];
  }

  function partition (left, right, pivotIndex) {
      pivot = nums[pivotIndex];
      swap(right, pivotIndex);

      let storeIndex = left;
      for (let i = left ; i < right ; i++) {
          if (nums[i] > pivot) {
              swap(storeIndex, i);
              storeIndex++;
          }
      }

      swap(right, storeIndex);

      return storeIndex;
  }

  function select (left = 0, right = nums.length - 1) {
      if (left === right) return nums[left];

      let pivotIndex = randomInt(left, right);
      pivotIndex = partition(left, right, pivotIndex);

      if (k - 1 === pivotIndex) return nums[k - 1];
      else if (k - 1 < pivotIndex) return select(left, pivotIndex - 1);
      else return select(pivotIndex + 1, right);
  }

  return select();
};

function randomInt (min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
