9.4 Bubble Sort
Bubble Sort follows the exchange sort approach. It is very easy to implement, but tends to
be particularly slow to run. Assume we have array a of size n that we wish to sort. Bubble
Sort starts by comparing a[n-1] with a[n-2] and swaps them if they are in the wrong order.
It then compares a[n-2] and a[n-3] and swaps those if need be, and so on. This means
that once it reaches a[0], the smallest entry will be in the correct place. It then starts from
the back again, comparing pairs of ‘neighbours’, but leaving the zeroth entry alone (which is
known to be correct). After it has reached the front again, the second-smallest entry will be
in place. It keeps making ‘passes’ over the array until it is sorted. More generally, at the ith
stage Bubble Sort compares neighbouring entries ‘from the back’, swapping them as needed.
The item with the lowest index that is compared to its right neighbour is a[i-1]. After the
ith stage, the entries a[0],...,a[i-1] are in their final position.
At this point it is worth introducing a simple ‘test-case’ of size n = 4 to demonstrate how
the various sorting algorithms work:
4 1 3 2
Bubble Sort starts by comparing a[3]=2 with a[2]=3. Since they are not in order, it swaps
them, giving 4 1 2 3 . It then compares a[2]=2 with a[1]=1. Since those are in order,
it leaves them where they are. Then it compares a[1]=1 with a[0]=4, and those are not in
order once again, so they have to be swapped. We get 1 4 2 3 . Note that the smallest
entry has reached its final place. This will always happen after Bubble Sort has done its first
‘pass’ over the array.
66
Now that the algorithm has reached the zeroth entry, it starts at the back again, comparing
a[3]=3 with a[2]=2. These entries are in order, so nothing happens. (Note that these
numbers have been compared before – there is nothing in Bubble Sort that prevents it from
repeating comparisons, which is why it tends to be pretty slow!) Then it compares a[2]=2
and a[1]=4. These are not in order, so they have to be swapped, giving 1 2 4 3 . Since
we already know that a[0] contains the smallest item, we leave it alone, and the second pass
is finished. Note that now the second-smallest entry is in place, too.
The algorithm now starts the third and final pass, comparing a[3]=3 and a[2]=4. Again
these are out of order and have to be swapped, giving 1 2 3 4 . Since it is known that
a[0] and a[1] contain the correct items already, they are not touched. Furthermore, the
third-smallest item is in place now, which means that the fourth-smallest has to be correct,
too. Thus the whole array is sorted.
It is now clear that Bubble Sort can be implemented as follows:
for ( i = 1 ; i < n ; i++ )
for ( j = n-1 ; j >= i ; j-- )
if ( a[j] < a[j-1] )
swap a[j] and a[j-1]
The outer loop goes over all n−1 positions that may still need to be swapped to the left, and
the inner loop goes from the end of the array back to that position.
As is usual for comparison-based sorting algorithms, the time complexity will be measured
by counting the number of comparisons that are being made. The outer loop is carried out
n − 1 times. The inner loop is carried out (n − 1) − (i − 1) = n − i times. So the number of
comparisons is the same in each case, namely
nX−1
i=1
nX−1
j=i
1 =
nX−1
i=1
(n − i)
= (n − 1) + (n − 2) + · · · + 1
=
n(n − 1)
2
.
Thus the worst case and average case number of comparisons are both proportional to n
2
,
and hence the average and worst case time complexities are O(n
2
).
