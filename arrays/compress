compress
Write a function, compress, that takes in a string as an argument. The function should return a compressed version of the string where consecutive occurrences of the same characters are compressed into the number of occurrences followed by the character. Single character occurrences should not be changed.

'aaa' compresses to '3a'
'cc' compresses to '2c'
't' should remain as 't'
You can assume that the input only contains alphabetic characters.

test_00:
compress('ccaaatsss'); // -> '2c3at3s'


const compress = (s) => {
  // todo using two pointers one char represnts the start
  // another pointer represnts the end of the streak of char
  let result = '';
  let j = 0; // start of the streak
  let i = 0; // end of the streak

  while (j <= s.length) {
    if (s[i] === s[j]) {
      j++;
    } else {
      // that mean I found different char
      let num = j - i;
      if (num === 1) {
        result += s[i];
      } else {
          result += num + s[i];
          i = j
      }
      i = j
    }
  }
  return result;

};

n = length of string
Time: O(n)
Space: O(n)
