33. Search in Rotated Sorted Array
Medium

14027

892

Add to List

Share
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.



Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1


Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104


const search = (nums, target) => {
    // let search for a pivot
    // We face 2 cases :
// 1> if arr[mid] > arr[right], it means we're in right sorted array, so go towards left to find the pivot element.
// 2> else it means the array is rotated, so go towards left to find that right sorted array.

    if(nums.length == 0 || nums == null) return -1;
    let left = 0;
    let right = nums.length - 1;

    while (left < right) {
    let mid = Math.floor((left + right) / 2);
        if (nums[mid] > nums[right]) {
            left = mid + 1
        } else {
            mid = right;
        }
    }
    // Now that we've found our pivot, let's work on finding the target.
    let pivot = left
    left = 0;
    right = nums.length - 1;
    if (nums[pivot] <= target && target <= nums[right]) {
        left = pivot
    } else {
        right = pivot
    }

    // Now that we know which part our target lies, let's perform binary search on that subarray:
    while (left <= right) {
        if (nums[mid] === target) {
            return mid
        } else if (nums[mid] < target) {
            left = mid + 1
        } else {
            right = mid - 1
        }
    }
return -1;

};


var search = function(nums, target) {
    // Step 1: Initialize the left and right pointers
    let left = 0; // Left pointer starts at the beginning of the array
    let right = nums.length - 1; // Right pointer starts at the end of the array

    // Step 2: Begin a while loop that continues as long as the left pointer is less than or equal to the right pointer
    while (left <= right) {
        // Step 3: Calculate the middle index of the current range
        let mid = Math.floor((left + right) / 2); // Integer division to find the middle index

        // Step 4: Check if the middle element is equal to the target
        if (nums[mid] === target) {
            return mid; // If the target is found, return its index
        }

        // Step 5: Check if the left half of the array is sorted
        if (nums[left] <= nums[mid]) {
            // The left half is sorted, check if the target lies within this sorted half
            if (target >= nums[left] && target < nums[mid]) {
                // Target is within the sorted left half
                right = mid - 1; // Narrow the search to the left half
            } else {
                // Target is not in the sorted left half, search the right half
                left = mid + 1; // Narrow the search to the right half
            }
        } else {
            // Step 6: If the left half is not sorted, then the right half must be sorted
            if (target > nums[mid] && target <= nums[right]) {
                // Target is within the sorted right half
                left = mid + 1; // Narrow the search to the right half
            } else {
                // Target is not in the sorted right half, search the left half
                right = mid - 1; // Narrow the search to the left half
            }
        }
    }

    // Step 7: If the target is not found after the while loop, return -1
    return -1; // Target not found, return -1
};
