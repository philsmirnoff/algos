33. Search in Rotated Sorted Array
Medium

14027

892

Add to List

Share
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.



Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1


Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104


const search = (nums, target) => {
    // let search for a pivot
    // We face 2 cases :
// 1> if arr[mid] > arr[right], it means we're in right sorted array, so go towards left to find the pivot element.
// 2> else it means the array is rotated, so go towards left to find that right sorted array.

    if(nums.length == 0 || nums == null) return -1;
    let left = 0;
    let right = nums.length - 1;

    while (left < right) {
    let mid = Math.floor((left + right) / 2);
        if (nums[mid] > nums[right]) {
            left = mid + 1
        } else {
            mid = right;
        }
    }
    // Now that we've found our pivot, let's work on finding the target.
    let pivot = left
    left = 0;
    right = nums.length - 1;
    if (nums[pivot] <= target && target <= nums[right]) {
        left = pivot
    } else {
        right = pivot
    }

    // Now that we know which part our target lies, let's perform binary search on that subarray:
    while (left <= right) {
        if (nums[mid] === target) {
            return mid
        } else if (nums[mid] < target) {
            left = mid + 1
        } else {
            right = mid - 1
        }
    }
return -1;

};
