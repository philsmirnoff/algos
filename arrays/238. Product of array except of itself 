238. Product of Array Except Self
Medium

12013

735

Add to List

Share
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.



Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]



/**
 * @param {number[]} nums
 * @return {number[]}
 */


explanation: https://www.youtube.com/watch?v=-3KG82kuD78

whats our input, output, conditions?
input number[] = array of numbers
output: number[] = the product of all elements except of itself
conditions = 0(n) complexity, without division

input - [1,2,3,4]
leftProduct = [1,1,2,6]
rightProduct = [24,12,4,1]
solutionProduct = [24,12,8,6]


correct solution
const productExceptSelf = (nums) => {

    // [1,2,3,4]
    // leftProduct = [1,1,2,6]
    // rightProduct = [24,12,4,1]
    // solution = [24,12,8,6]

    // let create three empty arrays, leftProduct, rightProduct, solution
    let leftProduct = [];
    let rightProduct = [];
    let solution = [];
     // populate leftProduct
    for (let i = 0; i < nums.length; i++) {
        if (leftProduct.length === 0) {
            leftProduct.push(1);
        } else {
            leftProduct.push(leftProduct[i-1]*nums[i-1])
        }
    }
        // populate rightProduct
    for (let i = nums.length-1; i>-1; i--)  {
    if (rightProduct.length === 0) {
        rightProduct.push(1)
    } else {
        rightProduct.unshift((rightProduct[0]*nums[i+1]))
    }
    }

    // populate solution
    for (let i = 0; i < leftProduct.length; i++) {
        solution.push(leftProduct[i]*rightProduct[i])
    }
    return solution
};


