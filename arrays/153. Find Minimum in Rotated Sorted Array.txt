153. Find Minimum in Rotated Sorted Array
Medium

6638

388

Add to List

Share
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.



Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times.


we need to have left pointer on the index 0; right pointer on the index - 1, and middle pointer (that symbolize point where the order is decreasing)

if nums[m] >= nums[r]
        search left
else
        search right


var findMin = function(nums) {
    let left = 0
    let right = nums.length - 1;

    while (left < right) {
        let midPoint = Math.floor((left + right)/ 2);

        if (nums[midPoint] > nums[right]) {
            left = midPoint + 1;
        } else {
            right = midPoint
        }
    } return nums[left]

};

0(logn)


we are having two pointers left and right pointers, and we are calculating the mid point, and we are checking
if our id value in the right portion of the array, because, the on the right portion, min value be always less than in right portion of the array.
we need to check if:
nums[mid >= nums[left]] then we need to search in the right portion of the array, so we need to update the left pointer to mid+1
else we need to search in the left portion of the array, so we need to update the right pointer to mid - 1

if we got to he point where we get to entire sorted portion array, then we need to return the left pointer value, because that will be the min value in the array.

var findMin = function(nums) {
    // Step 1: Initialize the start, end, and min variables
    let start = 0; // Start index of the array
    let end = nums.length - 1; // End index of the array
    let min = nums[0]; // Initially set the minimum to the first element in the array

    // Step 2: Start the binary search loop
    while (start <= end) { // Continue searching while the start index is less than or equal to end
        // Step 3: Check if the current portion of the array is already sorted
        if (nums[start] < nums[end]) {
            // If the portion from start to end is sorted, the minimum value is at the start
            min = Math.min(min, nums[start]); // Update the min if necessary
            break; // Exit the loop as we have found the minimum
        }

        // Step 4: Calculate the mid index to divide the array
        let mid = Math.floor((start + end) / 2); // Use integer division to find the middle index

        // Step 5: Check if the left half of the array is sorted
        if (nums[start] <= nums[mid]) {
            // If nums[start] <= nums[mid], then the left half is sorted
            min = Math.min(min, nums[start]); // The minimum element could be at the start of the left half
            start = mid + 1; // Narrow the search to the right half by setting start to mid + 1
        } else {
            // If nums[start] > nums[mid], then the right half must be sorted
            min = Math.min(min, nums[mid]); // The minimum element could be at the mid
            end = mid - 1; // Narrow the search to the left half by setting end to mid - 1
        }
    }

    // Step 6: Return the minimum value found
    return min; // Return the minimum element found in the rotated sorted array
};
