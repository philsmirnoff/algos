https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/

compare p, q values to curr node, base case: one is in left, other in right subtree, then curr is lca; of both of them in different return root
explaination:
1. base case: if the root is null, return null.
2. If p and q are both less than the current root value, the common ancestor must be in the left subtree.
3. If p and q are both greater than the current root value, the common ancestor must be in the right subtree.
4. If the conditions above are not met, the current root is the lowest common ancestor.



const lowestCommonAncestor = (root, p, q) => {
    // Base case: if the root is null, return null.
    if (root === null) {
        return null;
    }

    // If p and q are both less than the current root value,
    // the common ancestor must be in the left subtree.
    if (p.val < root.val && q.val < root.val) {
        return lowestCommonAncestor(root.left, p, q);
    }

    // If p and q are both greater than the current root value,
    // the common ancestor must be in the right subtree.
    if (p.val > root.val && q.val > root.val) {
        return lowestCommonAncestor(root.right, p, q);
    }

    // If the conditions above are not met, the current root is the lowest common ancestor.
    return root;
};

const lowestCommonAncestor = (root, p, q) => {
    // Base case: if the root is null, return null.
    if (root === null) {
        return null;
    }

    // If p and q are both less than the current root value,
    // the common ancestor must be in the left subtree.
    if (p.val < root.val && q.val < root.val) {
        return lowestCommonAncestor(root.left, p, q);
    }

    // If p and q are both greater than the current root value,
    // the common ancestor must be in the right subtree.
    if (p.val > root.val && q.val > root.val) {
        return lowestCommonAncestor(root.right, p, q);
    }

    // If the conditions above are not met, the current root is the lowest common ancestor.
    return root;
};
