https://leetcode.com/problems/top-k-frequent-elements/description/
347. Top K Frequent Elements
Solved
Medium
Topics
Companies
Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.



Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]


Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.


for each value we will count howm many occurances we have

num = [1, 1, 1, 2, 2, 3] k = 2

1 → 3

2 → 2

3 —> 1

we will sort it in ascending order (we should use max heap, popping from the heap k times (k * log n) heapify (n)

we will use hashmap to count the occurances of the value

and an array that will be the same size as the input array, index will be the freq of the element and count will be the list of the elements that occured particular times.. then we sorted result in descending order based of freq

iterarate over the sorted array and push ito the array looping till index is the size of k.

var topKFrequent = function(nums, k) {
    let frequency = {}
    for( let i = 0; i < nums.length; i++){
        if(frequency.hasOwnProperty(nums[i])) frequency[nums[i]] += 1;
        else frequency[nums[i]] = 1;
    }
    let result = Object.keys(frequency).map((key) => [Number(key), frequency[key]]);
    let sortedResult = result.sort((a,b) => {
        return b[1]-a[1]
    })
    let output = []
    for ( let i = 0; i < k; i++){
        output.push(sortedResult[i][0])
    }
    return output;
};

 Set - Frequency Counter | Using sort
 * Time O(NlogN) | Space O(N)


min heap
var topKFrequent = function(nums, k) {
  // Step 1: Build the frequency map
  const frequencyMap = new Map();

  nums.forEach(num => {
    frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);
  });

  // Step 2: Use a min-heap to find the top k frequent elements
  const minHeap = new MinHeap((a, b) => frequencyMap.get(a) - frequencyMap.get(b));

  for (let [num, freq] of frequencyMap) {
    minHeap.add(num);
    if (minHeap.size() > k) {
      minHeap.poll();
    }
  }

  // Step 3: Return the elements from the heap
  return minHeap.toArray();
};

// MinHeap class
class MinHeap {
  constructor(compareFn) {
    this.heap = [];
    this.compareFn = compareFn;
  }

  size() {
    return this.heap.length;
  }

  add(value) {
    this.heap.push(value);
    this._heapifyUp();
  }

  poll() {
    if (this.size() === 0) return null;
    const top = this.heap[0];
    const bottom = this.heap.pop();
    if (this.size() > 0) {
      this.heap[0] = bottom;
      this._heapifyDown();
    }
    return top;
  }

  toArray() {
    return this.heap;
  }

  _heapifyUp() {
    let index = this.size() - 1;
    while (index > 0) {
      const parentIndex = Math.floor((index - 1) / 2);
      if (this.compareFn(this.heap[index], this.heap[parentIndex]) >= 0) break;
      [this.heap[index], this.heap[parentIndex]] = [this.heap[parentIndex], this.heap[index]];
      index = parentIndex;
    }
  }

  _heapifyDown() {
    let index = 0;
    while (index * 2 + 1 < this.size()) {
      let smallerChildIndex = index * 2 + 1;
      if (index * 2 + 2 < this.size() && this.compareFn(this.heap[index * 2 + 2], this.heap[smallerChildIndex]) < 0) {
        smallerChildIndex = index * 2 + 2;
      }
      if (this.compareFn(this.heap[index], this.heap[smallerChildIndex]) <= 0) break;
      [this.heap[index], this.heap[smallerChildIndex]] = [this.heap[smallerChildIndex], this.heap[index]];
      index = smallerChildIndex;
    }
  }
}
// Time: O(nlogk), Space: O(n)


To solve the "Top K Frequent Elements" problem, you can follow these steps:

Count Frequencies: Use a frequency map to count the occurrences of each element in the array.
Use a Heap: Use a min-heap to keep track of the top k frequent elements.
Extract the Top K: Extract the top k elements from the heap.


another version of the same solution using minHeap

class MinHeap {
  // Constructor to initialize the heap array
  constructor() {
    this.heap = []; // The heap will be stored in this array
  }

  // Method to get the parent index of a given index i
  getParentIndex(i) {
    return Math.floor((i - 1) / 2); // Parent index formula
  }

  // Method to get the left child index of a given index i
  getLeftChildIndex(i) {
    return 2 * i + 1; // Left child index formula
  }

  // Method to get the right child index of a given index i
  getRightChildIndex(i) {
    return 2 * i + 2; // Right child index formula
  }

  // Method to swap elements at indices i and j
  swap(i, j) {
    [this.heap[i], this.heap[j]] = [this.heap[j], this.heap[i]]; // Swap using destructuring
  }

  // Method to insert a new value into the heap
  insert(value) {
    this.heap.push(value); // Add the new value to the end of the heap
    this.heapifyUp(); // Restore the heap property by moving the new value up
  }

  // Method to move the last inserted element to its correct position
  heapifyUp() {
    let i = this.heap.length - 1; // Start with the last element
    while (i > 0) { // Continue until the element is the root
      const parentIndex = this.getParentIndex(i); // Get the parent index
      if (this.heap[i] < this.heap[parentIndex]) { // If current element is smaller than its parent
        this.swap(i, parentIndex); // Swap them
        i = parentIndex; // Move to the parent's position
      } else {
        break; // If the heap property is satisfied, exit the loop
      }
    }
  }

  // Method to remove and return the minimum element (root) from the heap
  extractMin() {
    if (this.heap.length === 0) {
      return null; // If heap is empty, return null
    }

    const min = this.heap[0]; // Store the minimum value (root of the heap)
    this.heap[0] = this.heap.pop(); // Replace root with the last element in the heap
    this.heapifyDown(); // Restore the heap property by moving the new root down
    return min; // Return the minimum value
  }

  // Method to move the root element to its correct position
  heapifyDown() {
    let i = 0; // Start with the root element
    while (true) { // Continue until the heap property is restored
      const leftChildIndex = this.getLeftChildIndex(i); // Get the left child index
      const rightChildIndex = this.getRightChildIndex(i); // Get the right child index
      let smallestIndex = i; // Assume the current element is the smallest

      // Check if left child exists and is smaller than current smallest
      if (leftChildIndex < this.heap.length && this.heap[leftChildIndex] < this.heap[smallestIndex]) {
        smallestIndex = leftChildIndex;
      }

      // Check if right child exists and is smaller than current smallest
      if (rightChildIndex < this.heap.length && this.heap[rightChildIndex] < this.heap[smallestIndex]) {
        smallestIndex = rightChildIndex;
      }

      // If the smallest is not the current element, swap and continue
      if (smallestIndex !== i) {
        this.swap(i, smallestIndex); // Swap with the smallest child
        i = smallestIndex; // Move to the smallest child's position
      } else {
        break; // If the heap property is satisfied, exit the loop
      }
    }
  }

  // Method to get the minimum element (root) without removing it
  peek() {
    return this.heap.length > 0 ? this.heap[0] : null; // Return root or null if heap is empty
  }

  // Method to get the size of the heap
  size() {
    return this.heap.length; // Return the number of elements in the heap
  }
}



function topKFrequent(nums, k) {
    const frequencyMap = {};

    // Step 1: Build the frequency map
    for (let num of nums) {
        if (!frequencyMap[num]) {
            frequencyMap[num] = 0;
        }
        frequencyMap[num]++;
    }

    // Step 2: Use a min-heap to keep the top k frequent elements
    const minHeap = new MinHeap();

    for (let num in frequencyMap) {
        minHeap.insert([frequencyMap[num], num]); // [frequency, element]

        // Maintain the heap size to be at most k
        if (minHeap.size() > k) {
            minHeap.extractMin();
        }
    }

    // Step 3: Extract elements from the heap to get the top k frequent elements
    const result = [];
    while (minHeap.size() > 0) {
        result.push(minHeap.extractMin()[1]); // Extract element, ignore frequency
    }

    return result;
}

// Example usage
console.log(topKFrequent([1, 1, 1, 2, 2, 3], 2)); // Output: [1, 2]
console.log(topKFrequent([1], 1));               // Output: [1]
console.log(topKFrequent([1, 2, 3, 4, 5], 3));   // Output: [3, 2, 1]


// How This Code Works
Frequency Counting: A hash map (frequencyMap) is used to count the occurrences of each number in the nums array.

Maintaining a Min-Heap: The min-heap is used to store pairs of [frequency, num]. The heap is maintained to keep only the k most frequent elements:

If the heap size exceeds k, the root (smallest frequency element) is removed, ensuring only the most frequent elements remain.
Extracting Results: Once all elements have been processed, the heap contains the top k frequent elements. The result is extracted from the heap by taking the second element of each pair (the number).

Pros of This Approach
Efficiency: The heap ensures that insertion and extraction operations are efficient, with O(log k) complexity. The overall complexity of the algorithm is O(n log k), which is efficient for large inputs when k is much smaller than n.
Simplicity: Using a heap provides a straightforward way to keep track of the top k elements.
Cons of This Approach
Space Complexity: The heap and frequency map require additional space, O(n) for the map and O(k) for the heap. This can be a consideration in memory-constrained environments.
Heap Implementation: The custom heap implementation adds some complexity to the codebase. In environments where a heap is not provided by default, this is necessary but adds lines of code.
Conclusion
This implementation of a min-heap is a robust choice for solving the "Top K Frequent Elements" problem. It efficiently maintains the top k frequent elements as the input array is processed, making it suitable for large datasets. The code is clear and well-organized, adhering to the principles of heap operations, and effectively demonstrates the application of heaps in solving real-world problems.






You said:
What’s the time and space complexity of this solution
ChatGPT said:
ChatGPT
Let's analyze the time and space complexity of the solution provided using a min-heap to solve the "Top K Frequent Elements" problem.

Time Complexity
Building the Frequency Map:

We iterate through the entire input array nums to count the frequency of each element.
This takes O(n) time, where n is the length of the input array.
Inserting into the Min-Heap:

We iterate through each unique element in the frequency map. Let's denote the number of unique elements as m.
For each unique element, we perform an insertion operation into the min-heap.
Each insertion operation in a heap takes O(log k) time, where k is the maximum size of the heap (the number of top frequent elements we want to find).
Additionally, whenever the heap size exceeds k, we remove the smallest element using extractMin(), which also takes O(log k) time.
In the worst case, every element in the nums array is unique, so m could be as large as n.
Therefore, the time complexity for inserting all elements into the heap and maintaining its size is O(m log k). In the worst case, this is O(n log k).
Extracting Elements from the Min-Heap:

After processing all elements, we extract up to k elements from the heap.
Each extraction operation takes O(log k) time, and we perform this operation k times.
Thus, the extraction step has a time complexity of O(k log k).
Overall Time Complexity
Combining all the steps:

Building the frequency map: O(n)
Inserting into and maintaining the min-heap: O(n log k)
Extracting elements from the heap: O(k log k)
Since O(n log k) dominates both O(n) and O(k log k), the overall time complexity of the solution is O(n log k).

Space Complexity
Frequency Map:

We use a hash map to store the frequency of each element.
In the worst case, all elements in nums are unique, so the space required is O(n).
Min-Heap:

The heap stores up to k elements at any given time.
Thus, the space required for the heap is O(k).
Output Array:

We store the result (top k frequent elements) in an array of size k.
So the space required is O(k).
Overall Space Complexity
The space complexity is the sum of the space used by the frequency map and the min-heap.
In the worst case: O(n) (frequency map) + O(k) (min-heap) + O(k) (output array).
Since n could be much larger than k, the overall space complexity is dominated by O(n).

Summary
Time Complexity: O(n log k)
Space Complexity: O(n)
This solution is efficient and works well for cases where k is much smaller than n, making it a suitable choice for finding the top k frequent elements in large datasets.


Bucket sort
ar topKFrequent = function(nums, k) {
    // Initialize an object to count the frequency of each number
    let hashmap = {};
    // Initialize an array (bucket) to hold arrays of numbers by frequency
    let bucket = [];
    // Initialize an array to store the result of the top k frequent elements
    let result = [];

    // Loop through each number in the input array
    for (let num of nums) {
        // If the number is not already a key in hashmap, initialize it with a count of 1
        if (!(num in hashmap)) {
            hashmap[num] = 1;
        } else {
            // Increment the count for the current number
            hashmap[num]++;
        }
    }

    // Convert the hashmap into an array of entries (pairs of number and its frequency)
    let entries = Object.entries(hashmap).map(([key, freq]) => [Number(key), freq]);

    // Loop through each entry in the array of entries
    for (let [num, freq] of entries) {
        // If the bucket for this frequency does not exist, create it as a new array
        if (!bucket[freq]) {
            bucket[freq] = []; // Use an array instead of Set
        }
        // Add the current number to the bucket for its corresponding frequency
        bucket[freq].push(num); // Add the number to the frequency bucket
    }

    // Iterate over the bucket array from the highest frequency down to the lowest
    for (let i = bucket.length - 1; i >= 0; i--) {
        // If there are numbers at this frequency bucket, spread them into the result array
        if (bucket[i]) {
            result.push(...bucket[i]);
        }
        // If we have collected k elements, exit the loop
        if (result.length >= k) break; // Check if we have enough elements
    }

    // Return the array containing the top k frequent elements
    return result.slice(0, k); // Ensure we return exactly k elements
};
Time Complexity: O(n) - Building the frequency map takes O(n) time, and iterating over the bucket array takes O(n) time.


min heap implementation: 
class MinHeap {
  constructor() {
    this.heap = []; // Initialize an empty array to represent the heap.
  }

  getParentIndex(index) {
    return Math.floor((index - 1) / 2); // Calculate the parent's index.
  }

  getLeftChildIndex(index) {
    return 2 * index + 1; // Calculate the left child's index.
  }

  getRightChildIndex(index) {
    return 2 * index + 2; // Calculate the right child's index.
  }

  swap(index1, index2) {
    // Swap the values at the two specified indices in the heap.
    [this.heap[index1], this.heap[index2]] = [this.heap[index2], this.heap[index1]];
  }

  insert(pair) {
    this.heap.push(pair); // Add the new pair (frequency, element) to the end of the heap.
    this.heapifyUp(); // Restore the heap property by moving the new pair up.
  }

  heapifyUp() {
    let index = this.heap.length - 1; // Start with the last index (newly inserted value).
    while (this.getParentIndex(index) >= 0 && this.heap[this.getParentIndex(index)][0] > this.heap[index][0]) {
      // Continue as long as there is a parent and the parent frequency is greater than the current frequency.
      this.swap(this.getParentIndex(index), index); // Swap with the parent.
      index = this.getParentIndex(index); // Move up to the parent's index for the next comparison.
    }
  }

  remove() {
    if (this.heap.length === 0) {
      return null; // If the heap is empty, return null.
    }
    if (this.heap.length === 1) {
      return this.heap.pop(); // If there's only one element, remove and return it.
    }
    const root = this.heap[0]; // Store the root pair (frequency, element).
    this.heap[0] = this.heap.pop(); // Replace the root with the last element and remove the last element.
    this.heapifyDown(); // Restore the heap property by moving the new root down.
    return root; // Return the original root pair.
  }

  heapifyDown() {
    let index = 0; // Start from the root index.
    while (this.getLeftChildIndex(index) < this.heap.length) {
      // Continue as long as there is a left child.
      let smallerChildIndex = this.getLeftChildIndex(index); // Assume left child is the smallest.
      // Check if the right child exists and is smaller than the current smallest.
      if (this.getRightChildIndex(index) < this.heap.length && this.heap[this.getRightChildIndex(index)][0] < this.heap[smallerChildIndex][0]) {
        smallerChildIndex = this.getRightChildIndex(index); // Update to the right child if it is smaller.
      }
      // If the current node's frequency is less than or equal to the smallest child, the heap property is satisfied.
      if (this.heap[index][0] <= this.heap[smallerChildIndex][0]) {
        break; // Exit the loop if the heap property is satisfied.
      }
      this.swap(index, smallerChildIndex); // Swap the current element with the smaller child.
      index = smallerChildIndex; // Move down to the smaller child's index for the next comparison.
    }
  }

  peek() {
    return this.heap.length > 0 ? this.heap[0] : null; // Return the root pair (frequency, element) or null if the heap is empty.
  }
}

// Function to find the top K frequent elements
function topKFrequent(nums, k) {
  const hashmap = {}; // Initialize an object to count frequencies.

  // Count the frequency of each element
  for (const num of nums) {
    hashmap[num] = (hashmap[num] || 0) + 1; // Update the frequency in the hashmap.
  }

  const minHeap = new MinHeap(); // Initialize a new min heap.

  // Iterate through the hashmap to build the heap
  for (const num in hashmap) {
    const freq = hashmap[num]; // Get the frequency for the current number.
    minHeap.insert([freq, num]); // Insert the frequency and number as a pair into the min heap.

    // If the size of the heap exceeds k, remove the least frequent element
    if (minHeap.heap.length > k) {
      minHeap.remove(); // Remove the root of the heap (least frequent element).
    }
  }

  // Extract the top K frequent elements from the min heap
  const topKElements = [];
  while (minHeap.heap.length > 0) {
    const [freq, num] = minHeap.remove(); // Remove from the heap.
    topKElements.push(Number(num)); // Store the number in the result array.
  }

  return topKElements.reverse(); // Return the result array in reverse order to get the most frequent first.
}

// Example usage
const nums = [1, 1, 1, 2, 2, 3];
const k = 2;
console.log(topKFrequent(nums, k)); // Output: [1, 2]
