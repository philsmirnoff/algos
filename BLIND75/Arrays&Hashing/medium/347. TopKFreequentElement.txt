https://leetcode.com/problems/top-k-frequent-elements/description/
347. Top K Frequent Elements
Solved
Medium
Topics
Companies
Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.



Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]


Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.


for each value we will count howm many occurances we have

num = [1, 1, 1, 2, 2, 3] k = 2

1 → 3

2 → 2

3 —> 1

we will sort it in ascending order (we should use max heap, popping from the heap k times (k * log n) heapify (n)

we will use hashmap to count the occurances of the value

and an array that will be the same size as the input array, index will be the freq of the element and count will be the list of the elements that occured particular times.. then we sorted result in descending order based of freq

iterarate over the sorted array and push ito the array looping till index is the size of k.

var topKFrequent = function(nums, k) {
    let frequency = {}
    for( let i = 0; i < nums.length; i++){
        if(frequency.hasOwnProperty(nums[i])) frequency[nums[i]] += 1;
        else frequency[nums[i]] = 1;
    }
    let result = Object.keys(frequency).map((key) => [Number(key), frequency[key]]);
    let sortedResult = result.sort((a,b) => {
        return b[1]-a[1]
    })
    let output = []
    for ( let i = 0; i < k; i++){
        output.push(sortedResult[i][0])
    }
    return output;
};

 Set - Frequency Counter | Using sort
 * Time O(NlogN) | Space O(N)


min heap 
var topKFrequent = function(nums, k) {
  // Step 1: Build the frequency map
  const frequencyMap = new Map();
  
  nums.forEach(num => {
    frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);
  });
  
  // Step 2: Use a min-heap to find the top k frequent elements
  const minHeap = new MinHeap((a, b) => frequencyMap.get(a) - frequencyMap.get(b));
  
  for (let [num, freq] of frequencyMap) {
    minHeap.add(num);
    if (minHeap.size() > k) {
      minHeap.poll();
    }
  }
  
  // Step 3: Return the elements from the heap
  return minHeap.toArray();
};

// MinHeap class
class MinHeap {
  constructor(compareFn) {
    this.heap = [];
    this.compareFn = compareFn;
  }
  
  size() {
    return this.heap.length;
  }
  
  add(value) {
    this.heap.push(value);
    this._heapifyUp();
  }
  
  poll() {
    if (this.size() === 0) return null;
    const top = this.heap[0];
    const bottom = this.heap.pop();
    if (this.size() > 0) {
      this.heap[0] = bottom;
      this._heapifyDown();
    }
    return top;
  }
  
  toArray() {
    return this.heap;
  }
  
  _heapifyUp() {
    let index = this.size() - 1;
    while (index > 0) {
      const parentIndex = Math.floor((index - 1) / 2);
      if (this.compareFn(this.heap[index], this.heap[parentIndex]) >= 0) break;
      [this.heap[index], this.heap[parentIndex]] = [this.heap[parentIndex], this.heap[index]];
      index = parentIndex;
    }
  }
  
  _heapifyDown() {
    let index = 0;
    while (index * 2 + 1 < this.size()) {
      let smallerChildIndex = index * 2 + 1;
      if (index * 2 + 2 < this.size() && this.compareFn(this.heap[index * 2 + 2], this.heap[smallerChildIndex]) < 0) {
        smallerChildIndex = index * 2 + 2;
      }
      if (this.compareFn(this.heap[index], this.heap[smallerChildIndex]) <= 0) break;
      [this.heap[index], this.heap[smallerChildIndex]] = [this.heap[smallerChildIndex], this.heap[index]];
      index = smallerChildIndex;
    }
  }
}
// Time: O(nlogk), Space: O(n)


To solve the "Top K Frequent Elements" problem, you can follow these steps:

Count Frequencies: Use a frequency map to count the occurrences of each element in the array.
Use a Heap: Use a min-heap to keep track of the top k frequent elements.
Extract the Top K: Extract the top k elements from the heap.
