Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.



Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9


Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109

Explanation
Convert Array to Set:

numSet is a Set containing all unique elements from nums.
Iterate Through Elements:

For each element in numSet, check if it's the beginning of a sequence by ensuring the previous number (num - 1) is not in numSet.
Count Consecutive Elements:

Start from the current element and keep checking the next consecutive numbers (currentNum + 1) while counting them.
Track Maximum Length:

Compare the length of the current sequence with the maximum length found so far and update it if necessary.
Time Complexity
Insertion and Lookup in Set: O(1) on average.
Iterating through all elements: O(n).
Overall Time Complexity: O(n).
This solution efficiently finds the longest consecutive sequence in linear time.


var longestConsecutive = function(nums) {
  if (nums.length === 0) return 0;

  // Step 1: Store all numbers in a Set for O(1) lookups
  const numSet = new Set(nums);
  let maxLength = 0;

  // Step 2: Iterate through each number
  for (const num of numSet) {
    // Step 3: Check if it's the start of a sequence
    if (!numSet.has(num - 1)) {
      let currentNum = num;
      let currentLength = 1;

      // Step 4: Count consecutive numbers
      while (numSet.has(currentNum + 1)) {
        currentNum += 1;
        currentLength += 1;
      }

      // Step 5: Update maximum length
      maxLength = Math.max(maxLength, currentLength);
    }
  }

  return maxLength;

};
