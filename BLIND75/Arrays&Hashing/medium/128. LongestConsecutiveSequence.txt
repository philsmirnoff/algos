Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.



Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9


Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109

Explanation
1.Convert Array to Set:
numSet is a Set containing all unique elements from nums.

2. Iterate Through Elements:
For each element in numSet, check if it's the beginning of a sequence by ensuring the previous number (num - 1) is not in numSet.

3. Count Consecutive Elements:
Start from the current element and keep checking the next consecutive numbers (currentNum + 1) while counting them.

4.Track Maximum Length:
Compare the length of the current sequence with the maximum length found so far and update it if necessary.
Time Complexity
Insertion and Lookup in Set: O(1) on average.
Iterating through all elements: O(n).
Overall Time Complexity: O(n).
This solution efficiently finds the longest consecutive sequence in linear time.


var longestConsecutive = function(nums) {
  if (nums.length === 0) return 0;

  // Step 1: Store all numbers in a Set for O(1) lookups
  const numSet = new Set(nums);
  let maxLength = 0;

  // Step 2: Iterate through each number
  for (const num of numSet) {
    // Step 3: Check if it's the start of a sequence
    if (!numSet.has(num - 1)) {
      let currentNum = num;
      let currentLength = 1;

      // Step 4: Count consecutive numbers
      while (numSet.has(currentNum + 1)) {
        currentNum += 1;
        currentLength += 1;
      }

      // Step 5: Update maximum length
      maxLength = Math.max(maxLength, currentLength);
    }
  }

  return maxLength;

};


from typing import List

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0

        # Step 1: Store all numbers in a set for O(1) lookups
        num_set = set(nums)
        max_length = 0

        # Step 2: Iterate through each number
        for num in num_set:
            # Step 3: Check if it's the start of a sequence
            if num - 1 not in num_set:
                current_num = num
                current_length = 1

                # Step 4: Count consecutive numbers
                while current_num + 1 in num_set:
                    current_num += 1
                    current_length += 1

                # Step 5: Update maximum length
                max_length = max(max_length, current_length)

        return max_length

# Example usage
solution = Solution()
nums = [100, 4, 200, 1, 3, 2]
print(solution.longestConsecutive(nums))  # Output: 4t in
Yes, the while loop inside the for loop does affect the time complexity, but it does not result in a worst-case complexity of O(n^2), as it might seem at first glance. Let me explain why.

Key Insight:
The important observation is that each element is processed at most once by the while loop. While there is a for loop iterating over the unique elements and a while loop that checks consecutive numbers, each element is only visited once as part of a sequence.

Why Does This Not Result in O(n^2)?
For Loop: The for loop iterates over each unique element in the set (num_set). The total number of unique elements is at most n, so the for loop runs O(n) times.

While Loop: The while loop is used to check consecutive elements (current_num + 1) in the sequence. However, each element is only processed once because the while loop only starts counting from the smallest element of a sequence. Once an element is visited, it is part of a sequence, and subsequent iterations in the for loop will skip that element.

For example, if the sequence is 1, 2, 3, 4, the while loop processes the numbers 1, 2, 3, 4 once. After processing 1, the next time 2 is encountered, the while loop doesn't start a new sequence because 1 was already visited.
This ensures that each element in the array is only "visited" once by the while loop.
How Many Times Is the while Loop Executed?
The while loop processes each element of the sequence exactly once. For a sequence of consecutive numbers, each element will only contribute once to the total work done.
In total, the number of iterations performed by the while loop across all for loop iterations is O(n), as each element is processed at most once.
Total Time Complexity:
For Loop: Runs O(n) times, where n is the number of unique elements.
While Loop: Each element is processed once, contributing O(n) overall time.
Thus, the total time complexity is O(n), even though there is a while loop inside the for loop. The while loop doesn't result in a nested O(n) operation for every iteration of the for loop; it only processes each element once, which keeps the time complexity linear.

Final Time Complexity:
Time Complexity: O(n)
Space Complexity: O(n) (due to the set storage)


var longestConsecutive = function(nums) {
  if (nums.length === 0) return 0;

  // Step 1: Store all numbers in a Set for O(1) lookups
  const numSet = new Set(nums);
  let maxLength = 0;

  // Step 2: Iterate through each number
  for (const num of numSet) {
    // Step 3: Check if it's the start of a sequence
    if (!numSet.has(num - 1)) {
      let currentNum = num;
      let currentLength = 1;

      // Step 4: Count consecutive numbers
      while (numSet.has(currentNum + 1)) {
        currentNum += 1;
        currentLength += 1;
      }

      // Step 5: Update maximum length
      maxLength = Math.max(maxLength, currentLength);
    }
  }

  return maxLength;

};
