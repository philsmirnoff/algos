49. Group Anagrams
Medium

9279

316

Add to List

Share
Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.



Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]


Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.
Accepted


Time complexity O(m * n)


// lets sort the array at nlogn time and iterate through the array
[eat, tea, tan, ate, nat, bat]
const sortedStrs = strs.map(word => word.split('').sort('').join(''))
.split the word, sort the word, join the word
strs[i].split(''):

This method splits the string strs[i] into an array of its individual characters.
For example, "eat".split('') results in ['e', 'a', 't'].
sort():

This method sorts the array of characters in alphabetical order.
For example, ['e', 'a', 't'].sort() results in ['a', 'e', 't'].
join(''):

This method joins the sorted array of characters back into a single string.
For example, ['a', 'e', 't'].join('') results in "aet".


[eat, tea, tan, ate, nat, bat]
[aet, aet, ant, aet, ant, abt]

iteration example
hash[aet] = [eat]
hash[aet] = [eat, tea]
hash[ant] = [tan]
hash[aet] = [eat, tea, ate]
hash[ant] = [tan, nat]
hash[abt] = [bat]

//
use hashmap and check if [aet] is in the hash, if its not in the map we will added it to the map, and set the ate key with value eat
hash[aet] = [eat, tea]
next iteration aet is in there so add tea to the array, so add ant to the the hasg and set the value to tan
hash[ant] = [tan]

once we got al these values, we need to return all these values

another explaination:
// The function first maps the input array of strings by sorting each string, which takes O(n*m log m) time because for each of the n strings, we sort m characters.

// Then it iterates through the sorted array of strings using a for loop, which takes O(n) time. Inside the loop, it checks if a given sorted string is in the map object, if it is not, it creates a new entry in the map object with that sorted string as the key and its corresponding original string as the value. If the key already exists in the map, it pushes the original string into the array that is the value of that key. So, the time complexity of this loop is O(n).

// After the loop, it returns the values of the map object, which takes O(n) time.

// The space complexity is O(n*m) because we use a map object to store the n strings, where each string has m characters.




var groupAnagrams = function(strs) {
    if (strs.length === 0) return []

    let hashmap = {}

    let sortedStrs = strs.map((word) => word.split("").sort().join(""))

    for (let i = 0; i < strs.length; i++) {
        let str = sortedStrs[i]

        if (!(str in hashmap)) {
            hashmap[str] = [strs[i]]
        } else {
            hashmap[str].push(strs[i])
        }
    }

    return Object.values(hashmap)
};


in python
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        ## sort strs in lexical order
        ## iterate over the original string and check:
            ## if the that sorted word exist in hashmap:
                ## if it is not it creates object entry with key as sorted string and value is corresponding word:
                ## if it is it pushes the word from original string into hashmap as value

            ## return values of hashmap
        if len(strs) == 0:
            return []
        hashmap = {}

        for s in strs:
            sorted_str = ''.join(sorted(s))
            if sorted_str in hashmap:
                hashmap[sorted_str].append(s)
            else:
                hashmap[sorted_str] = [s]

        return list(hashmap.values())


insert into restaurant_discovery_content(discovery_content_id, restaurant_id, title, description, is_hidden)
values(12, 1, 'Delicious Burger and Fries', 'A description of the Burger Fries offered at the restaurant', false)

insert into restaurant_discovery_content_media
(discovery_content_id , media_id)
values
(12, 1)

UPDATE restaurant_discovery_content_media
SET media_id = 3
WHERE discovery_content_id = 12;

