const { OutlinedInput } = require("@material-ui/core")
const { format } = require("express/lib/response")

zipper lists
Write a function, zipperLists, that takes in the head of two linked lists as arguments. The function should zipper the two lists together into single linked list by alternating nodes. If one of the linked lists is longer than the other, the resulting list should terminate with the remaining nodes. The function should return the head of the zippered linked list.

Do this in-place, by mutating the original Nodes.

You may assume that both input lists are non-empty.

test_00:
const a = new Node("a");
const b = new Node("b");
const c = new Node("c");
a.next = b;
b.next = c;
// a -> b -> c

const x = new Node("x");
const y = new Node("y");
const z = new Node("z");
x.next = y;
y.next = z;
// x -> y -> z

zipperLists(a, x);
// a -> x -> b -> y -> c -> z


approach

head1
A -> B -> C -> D -> E -> F
cur1
head2
Q -> R
cur2

tail
A -> Q -> B -> R -> C -> D -> E -> F


We past both of these head nodes, head! and head2;
And respective current pointers;
We alweays want to start with head node list one;
ANd we nedd to tracjk the tail of our ouput
we are going to have a Reference;'
like that we can figure out how we can add
new nodes to our current output
Since we already begin our chain with
first node of list one, we need to make sure
that we actually progress curr1, so the curr1
needs to be pointed at B node

A -> B -> C -> D -> E -> F
    cur1
Q -> R
curr2

A
tail

let count = 0;

we can establish simple altenating pattern using counter variable starting on zero;
Based on if count is even or odd, that would tell you from which list you should takesyour next node;
whenevr is my counter is even I would grab node from list 2
whenever is my counter is odd I would grab node from list 1;

right now count = 0 so I ll grab the node Q from the list 2 and add as the next to my tail;



Now I ve consumed node from list two,
I need to be sure I progress current to its next;
and progress tail to its next so wen set up for the next iteration;
at this point I need to increment my count by one;

A -> B -> C -> D -> E -> F
    cur1
Q -> R
   curr2

A -> Q
   tail

let count = 1;


Since my count is one and its odd I need to take the node from the list one;
and add  B node to the tail; and we hll have to progress current1 to current1.next;
tail to tail.next; and increment the count to 2;


A -> B -> C -> D -> E -> F
        cur1
Q -> R
   curr2

A -> Q -> B
         tail

let count = 2;


Since we are even we will take a node R fro,m list2 and add it to the tail;
and updates the pointers;

A -> B -> C -> D -> E -> F
         cur1
Q -> R -> null
          curr2

A -> Q -> B -> R
            tail

let count = 3;

Now I existed all my second list2 nodes and Jusst need to add
the rest of the nodes from the list1;

A -> B -> C -> D -> E -> F
         cur1
Q -> R -> null
          curr2

A -> Q -> B -> R -> C -> D -> E -> F
            tail

let count = 3;

Overall strategy is to maintain pointers to both of our respective
linked list and maintain counts and tail pointer tha we use to build our output;

Time complexity
n = length of list 1;
m = length of list 2;

Time complexity: O(min(n,m)) - we need as many iterations as the shorter of the two lists;
some form of linear time complexity;
Space complexity O(1) - we are not creating any new nodes, we are rerouting next pointers;

Solution:
// class Node {
//   constructor(val) {
//     this.val = val;
//     this.next = null;
//   }
// }

const zipperLists = (head1, head2) => {
  // todo
  let tail = head1;
  let current1 = head1.next;
  let current2 = head2;
  let count = 0;
  while (current1 !== null && current2 !== null) {
    if (count % 2 === 0) {
      tail.next = current2;
      current2 = current2.next
    } else {
      tail.next = current1;
      current1 = current1.next;
    }
     tail = tail.next;
     count += 1;
   }

  if (current1 !== null) tail.next = current1;
  if (current2 !== null) tail.next = current2;
  return head1;
};

module.exports = {
  zipperLists,
};
