21. Merge Two Sorted Lists
Easy

12094

1106

Add to List

Share
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.



Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]


Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.


/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} list1
 * @param {ListNode} list2
 * @return {ListNode}
 */
var mergeTwoLists = function(list1, list2) {
    // lets create dummy node
    let dummy = new ListNode(-1);
    let head = dummy;

    while (list1 !== null && list2 !== null) {
        if (list1.val <= list2.val) {
        dummy.next = list1;
        list1 = list1.next
        } else {
            dummy.next = list2;
            list2 = list2.next;
        }
        dummy = dummy.next;
    }

    if(list1 !== null) {
         dummy.next = list1
    } else {
        (list2 !== null)
        dummy.next = list2
    }

    return head.next
};


var mergeTwoLists = function(list1, list2) {
    // Step 1: Create a dummy node that will act as the starting point of the merged list.
    // The dummy node helps simplify edge case handling.
    let dummy = new ListNode(null);

    // Step 2: Initialize a pointer `head` to point to the dummy node.
    // This will help us easily return the merged list later.
    let head = dummy;

    // Step 3: Traverse both lists while both lists are non-empty.
    // We'll compare the values of the current nodes in both lists and link the smaller node to the merged list.
    while (list1 !== null && list2 !== null) {
        // Step 4: If the value of the current node in list1 is less than or equal to the value in list2,
        // set the `next` pointer of `dummy` to the current node in list1.
        if (list1.val <= list2.val) {
            dummy.next = list1;

            // Step 5: Move the pointer in list1 to the next node.
            list1 = list1.next;
        } else {
            // Step 6: If the value of the current node in list2 is smaller than the value in list1,
            // set the `next` pointer of `dummy` to the current node in list2.
            dummy.next = list2;

            // Step 7: Move the pointer in list2 to the next node.
            list2 = list2.next;
        }

        // Step 8: Move the `dummy` pointer to the next node in the merged list (which is now `dummy.next`).
        dummy = dummy.next;
    }

    // Step 9: After one of the lists becomes empty, if there are remaining nodes in list1 or list2,
    // append the remainder of the non-empty list to the merged list.
    if (list1 !== null) {
        dummy.next = list1;  // Attach the remaining nodes of list1 to the merged list.
    } else {
        dummy.next = list2;  // Attach the remaining nodes of list2 to the merged list.
    }

    // Step 10: Return the merged list starting from the node after the dummy node.
    // We return `head.next` because `head` points to the dummy node which is not part of the result.
    return head.next;
};
