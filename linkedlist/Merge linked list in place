merge lists
Write a function, mergeLists, that takes in the head of two sorted linked lists as arguments. The function should merge the two lists together into single sorted linked list. The function should return the head of the merged linked list.

Do this in-place, by mutating the original Nodes.

You may assume that both input lists are non-empty and contain increasing sorted numbers.

class Node {
  constructor(val) {
    this.val = val;
    this.next = null;
  }
}

const mergeLists = (head1, head2) => {
  // todo
  // we will create dummy node to initialize our output list, and then
  // i want to access dummyHead.next to get the output list, without including dummy node itself
  let dummyHead = new Node(null);
  // we need to maintaine the tail pointer to add comppared nodes to constructt the output list
  let tail = dummyHead;
  // lets create our pointers  for current nodes;
  let curr1 = head1;
  let curr2 = head2;

  while (curr1 !== null && curr2 !== null) {
    if (curr1.val < curr2.val) {
      tail.next = curr1;
      curr1 = curr1.next;
    } else {
      tail.next = curr2;
      curr2 = curr2.next;
    }
    tail = tail.next;
  }
  if (curr1 !== null) {
   tail.next = curr1;
  }
  if (curr2 !== null) {
    tail.next = curr2
  }
  return dummyHead.next
};

n = length of list 1
m = length of list 2
Time: O(min(n, m))
Space: O(1)
