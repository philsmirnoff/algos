297. Serialize and Deserialize Binary Tree
Hard

6672

257

Add to List

Share
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.



Example 1:


Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]
Example 2:

Input: root = []
Output: []


// solution

function serializeNode(node) {
    if(!node){
        return 'null'
    }
    return `${node.val},${serializeNode(node.left)},${serializeNode(node.right)}`
}


var serialize = function(root) {
    const result = serializeNode(root)
    return result
};

function deserializeNode(arr) {
    if(arr.length > 0){
        const str = arr.shift()
        if(str != 'null'){
            const node = new TreeNode()
            node.val = parseInt(str)

            if(arr.length > 0){
                node.left = deserializeNode(arr)
                node.right = deserializeNode(arr)
            }
            return node
        }
    }
    return null
}

var deserialize = function(data) {
    const arr = data.split(',')
    const root = deserializeNode(arr)
    return root
};
