const { unstable_batchedUpdates } = require("react-redux/es/utils/reactBatchedUpdates")

leaf list
Write a function, leafList, that takes in the root of a binary tree and returns an array containing the values of all leaf nodes in left-to-right order.

test_00:
const a = new Node("a");
const b = new Node("b");
const c = new Node("c");
const d = new Node("d");
const e = new Node("e");
const f = new Node("f");

a.left = b;
a.right = c;
b.left = d;
b.right = e;
c.right = f;

//      a
//    /   \
//   b     c
//  / \     \
// d   e     f

leafList(a); // -> [ 'd', 'e', 'f' ]

solutions
depth first (iterative)
const leafList = (root) => {
  if (root === null) return [];
  const leaves = [];
  const stack = [ root ];
  while (stack.length) {
    const current = stack.pop();
    if (current.left === null && current.right === null) leaves.push(current.val);

    if (current.right !== null) stack.push(current.right);
    if (current.left !== null) stack.push(current.left);
  }
  return leaves;
};
n = number of nodes
Time: O(n)
Space: O(n)
depth first (recursive)
const leafList = (root) => {
  const leaves = [];
  fillLeaves(root, leaves);
  return leaves;
};

const fillLeaves = (root, leaves) => {
  if (root === null) return;
  if (root.left === null && root.right === null) leaves.push(root.val);
  fillLeaves(root.left, leaves);
  fillLeaves(root.right, leaves);
};
n = number of nodes
Time: O(n)
Space: O(n)


unstable_batchedUpdates;
