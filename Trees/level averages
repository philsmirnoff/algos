level averages
Write a function, levelAverages, that takes in the root of a binary tree that contains number values. The function should return an array containing the average value of each level.

test_00:
const a = new Node(3);
const b = new Node(11);
const c = new Node(4);
const d = new Node(4);
const e = new Node(-2);
const f = new Node(1);

a.left = b;
a.right = c;
b.left = d;
b.right = e;
c.right = f;

//       3
//    /    \
//   11     4
//  / \      \
// 4   -2     1

levelAverages(a); // -> [ 3, 7.5, 1 ]

Solutions

/ class Node {
//   constructor(val) {
//     this.val = val;
//     this.left = null;
//     this.right = null;
//   }
// }

const levelAverages = (root) => {
  // todo
  let levels = [];
    // 1. create aa helper function
  fillLevels(root, levels, 0);
  const avgs = []
  //3 calculate averages level by levels
  for (let level of levels) {
    avgs.push(getAverage(level))
  }
 return avgs;

}
///2. get averages
const getAverage = (array) => {
    let sum = 0;
  for (let num of array) {
    sum += num
  }
  return sum / array.length;
}
  const fillLevels = (root, levels, levelNum) => {
    if (root === null) return;

    if (levels.length === levelNum) {
      levels.push([ root.val ]);
    } else {
      levels[levelNum].push(root.val)
    }
  fillLevels(root.left, levels, levelNum + 1);
  fillLevels(root.right, levels, levelNum + 1);
};

module.exports = {
  levelAverages,
};


n = number of nodes
Time: O(n)
Space: O(n)
