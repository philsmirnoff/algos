572. Subtree of Another Tree
Easy

7382

420

Add to List

Share
Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.



Example 1:


Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} subRoot
 * @return {boolean}
 */
var isSubtree = function(root, subRoot) {
    if (!root) return false

    // Helper function to check if two trees are identical
    const isIdentical = (node1, node2) => {
        if (node1 === null && node2 === null) return true
        if (node1 === null || node2 === null) return false

        if (node1.val !== node2.val) return false

        return isIdentical(node1.left, node2.left) && isIdentical(node1.right, node2.right)

    }
    // Check if the current subtree is identical to the target tree
    if (isIdentical(root, subRoot)) {
        return true
        }
  // Recursively check if the target tree is a subtree of the left or right subtree of the current node
     return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot)
};
Time Complexity:
Traversal: The solution traverses through the main tree root and the subtree subRoot. The traversal is done recursively.
The traversal visits each node once in both the main tree and the subtree.
Therefore, the time complexity of the traversal part is O(n + m), where n is the number of nodes in the main tree and m is the number of nodes in the subtree.
Comparison: At each node of the main tree, the solution compares the subtree rooted at that node with the given subtree.
The comparison involves traversing the subtree again, which has its own time complexity.
The worst-case scenario would be when every node of the main tree is checked against the subtree.
The worst-case time complexity of the comparison part can be considered O(n * m), where n is the number of nodes in the main tree and m is the number of nodes in the subtree.
Overall, the time complexity of the solution is O(n * m), where n is the number of nodes in the main tree and m is the number of nodes in the subtree.

Space Complexity:
The space complexity is determined by the recursive calls made during traversal and comparison.
In the worst-case scenario, where the tree is completely unbalanced, the depth of the recursion can be equal to the number of nodes in the tree.
Therefore, the space complexity of the solution is O(max(n, m)), where n is the number of nodes in the main tree and m is the number of nodes in the subtree.
In summary, the time complexity of the solution is O(n * m), and the space complexity is O(max(n, m)).
