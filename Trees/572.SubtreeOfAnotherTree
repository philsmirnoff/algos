572. Subtree of Another Tree
Easy

7382

420

Add to List

Share
Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.



Example 1:


Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} subRoot
 * @return {boolean}
 */
var isSubtree = function(root, subRoot) {
    if (!root) return false

    // Helper function to check if two trees are identical
    const isIdentical = (node1, node2) => {
        if (node1 === null && node2 === null) return true
        if (node1 === null || node2 === null) return false

        if (node1.val !== node2.val) return false

        return isIdentical(node1.left, node2.left) && isIdentical(node1.right, node2.right)

    }
    // Check if the current subtree is identical to the target tree
    if (isIdentical(root, subRoot)) {
        return true
        }
  // Recursively check if the target tree is a subtree of the left or right subtree of the current node
     return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot)
};
