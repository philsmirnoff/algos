102. Binary Tree Level Order Traversal
Medium

8278

161

Add to List

Share
Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).



Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []

//////////////
var levelOrder = function(root) {
    if(!root) return [];
    const results = [];
    let queue = [root];

    while(queue.length){
        const level = [];
        const newQueue = [];
        for(const node of queue){
            level.push(node.val);
            if(node.left) newQueue.push(node.left);
            if(node.right) newQueue.push(node.right);
        }
        results.push(level);
        queue = newQueue;
    }
    return results;
};


Solution #2:
var levelOrder = function(root) {
    if(!root) return [];
    const results = [];
    let queue = [root];

    while(queue.length){
        const level = [];
        const size = queue.length;
        for(let i = 0; i < size; i++){
            const node = queue.shift();
            level.push(node.val);
            if(node.left) queue.push(node.left);
            if(node.right) queue.push(node.right);
        }
        results.push(level);
    }
    return results;
};


Time Complexity:

The algorithm traverses each node exactly once.
At each node, it performs constant time operations (e.g., pushing and popping from the queue, accessing node values).
Therefore, the time complexity depends on the number of nodes in the binary tree.
Let n be the number of nodes in the binary tree. In the worst case, all n nodes need to be visited.
Hence, the time complexity is O(n).
Space Complexity:

The space complexity is determined by the maximum number of nodes that are stored in the queue at any given time during the BFS traversal.
At each level of the binary tree, the number of nodes in the queue can be at most equal to the number of nodes at that level.
In the worst case, the maximum number of nodes at any level can be roughly half of the total number of nodes in the tree (for a completely full tree).
Therefore, the space complexity of the queue is O(n/2), which simplifies to O(n).
Additionally, the result array stores the values of nodes level by level, which also contributes to the space complexity.
Hence, the overall space complexity is O(n).
In summary:

Time Complexity: O(n)
Space Complexity: O(n)
