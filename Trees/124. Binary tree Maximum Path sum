124. Binary Tree Maximum Path Sum
Hard

9541

543

Add to List

Share
A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.



Example 1:


Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.
Example 2:


Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.



   var maxPathSum = function(root) {
    let maxPathSumNum = -Infinity;

    const maxPathSumRec = function(node){
        if(!node){
            return 0;
        }

        let leftMax = Math.max(maxPathSumRec(node.left), 0);
        let rightMax = Math.max(maxPathSumRec(node.right), 0);
        maxPathSumNum = Math.max(maxPathSumNum, leftMax + rightMax + node.val);
        return Math.max(leftMax, rightMax) + node.val;
    };

    maxPathSumRec(root);
    return maxPathSumNum;
};


/// another great solution
var maxPathSum = function (root) {
  // Initialize the maximum sum to negative infinity
  const ans = { val: -Infinity };

  // Start the depth-first search (DFS) to compute the maximum path sum
  dfs(root, ans);

  // Return the maximum path sum found during the DFS traversal
  return ans.val;
};

// Depth-First Search (DFS) function
function dfs(root, ans) {
  // Base case: If the current node is null, return 0
  if (!root) return 0;

  // Recursively compute the maximum sum of the left subtree
  const left = dfs(root.left, ans);

  // Recursively compute the maximum sum of the right subtree
  const right = dfs(root.right, ans);

  // Calculate the maximum value considering three cases:
  // 1. Only the current node
  // 2. Current node + left subtree
  // 3. Current node + right subtree
  const maxVal = Math.max(root.val, root.val + left, root.val + right);

  // Update the global maximum sum if it's greater than the current maximum value
  ans.val = Math.max(ans.val, maxVal, root.val + left + right);

  // Return the maximum value among the three cases to be used in parent nodes
  return maxVal;
}
Time complexity: O(n)
Space complexity: O(h)O(h), where hh is the height of the binary tree
