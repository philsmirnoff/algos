98. Validate Binary Search Tree
Medium

9831

892

Add to List

Share
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.


Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.


// solution
**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
const isValidBST = root => helper(root, null, null)

const helper = (root, min, max) => {
  if (root === null) return true
  if (min !== null && root.val <= min) return false
  if (max !== null && root.val >= max) return false
  const leftValidBST = helper(root.left, min, root.val)
  const rightValidBST = helper(root.right, root.val, max)
  return leftValidBST && rightValidBST
}
