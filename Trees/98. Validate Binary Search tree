98. Validate Binary Search Tree
Medium

9831

892

Add to List

Share
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.


Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.


// solution
**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
const isValidBST = root => helper(root, null, null)

const helper = (root, min, max) => {
  if (root === null) return true
  if (min !== null && root.val <= min) return false
  if (max !== null && root.val >= max) return false
  const leftValidBST = helper(root.left, min, root.val)
  const rightValidBST = helper(root.right, root.val, max)
  return leftValidBST && rightValidBST
}


// Main function to check if the given binary tree is a valid BST
const isValidBST = root => helper(root, null, null)

// Helper function for recursive traversal and validation
const helper = (root, min, max) => {
  // Base case: if the current node is null, it's a valid BST
  if (root === null) return true

  // Check if the current node's value violates the BST property
  if (min !== null && root.val <= min) return false
  if (max !== null && root.val >= max) return false

  // Recursively check the left and right subtrees
  // For the left subtree, the maximum value becomes the current node's value
  // For the right subtree, the minimum value becomes the current node's value
  const leftValidBST = helper(root.left, min, root.val)
  const rightValidBST = helper(root.right, root.val, max)

  // Return true only if both the left and right subtrees are valid BSTs
  return leftValidBST && rightValidBST
}


The isValidBST function calls the helper function with the root node of the binary tree and null for both min and max initially.
In the helper function:
It first checks if the current node is null. If so, it returns true because an empty tree is considered a valid BST.
Then, it checks if the current node's value violates the BST property with respect to the given min and max values. If it does, it returns false.
Recursively, it calls the helper function for the left and right subtrees, updating the min and max values accordingly.
Finally, it returns true if both left and right subtrees are valid BSTs; otherwise, it returns false.
The isValidBST function returns the result obtained from the helper function, indicating whether the entire binary tree is a valid BST.


Time Complexity: O(n)
Space Complexity: O(log n) on average, O(n) in the worst case


Time Complexity: O(n)
Space Complexity: O(log n) on average, O(n) in the worst case
