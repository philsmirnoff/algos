104. Maximum Depth of Binary Tree
Easy

7076

126

Add to List

Share
Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.



Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2


Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100


solution


/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxDepth = function(root) {
    // dfs recursive
    if (root === null) return 0;

    let left = maxDepth(root.left)
    let right = maxDepth(root.right)
    return Math.max(left, right) + 1


};

var maxDepth = function(root) {
    // we will use breadth first search
    // initilize queue to root and while queue exist
    // we will cretae currentLevel
    // shift the currentNode from the queew and push ito the currentLevel
    // and push current node val into the queeue
    // if current nide has left child, push left child ito the quee
    // currentNde has right child push right child in to queee

    let queue = [root]
    let maxDepth = 0;
    let result = []
    if (!root) return 0

    while (queue.length) {
        let levelSize = queue.length;
        let currentLevel = []
        for (let i = 0; i < levelSize; i++) {
            let currentNode = queue.shift()
            currentLevel.push(currentNode.val)

            if (currentNode.left) queue.push(currentNode.left)
            if (currentNode.right) queue.push(currentNode.right)
        }
        result.push(currentLevel)
        maxDepth++
    }
 return maxDepth
}
