 // Use DFS to add values to an array
// Return the kth index of that array
var kthSmallest = function(root, k) {
    const values = []

    // DFS function
    function dfs(root, values) {
        if(root.left) dfs(root.left, values)
        values.push(root.val)
        if(root.right) dfs(root.right, values)
    }

    // Run dfs and populate array of values
    dfs(root, values)

    return values[k-1]
};

// solution 2

var kthSmallest = function(root, k) {
    let array = []
    dfs(root)
    return array[k - 1]

    function dfs(root){
        if(!root){
            return
        }
        dfs(root.left)
        array.push(root.val)
        dfs(root.right)
    }
};

Time Complexity:

In the provided solution, a depth-first search (DFS) algorithm is used to traverse the binary search tree (BST) in an in-order manner.
In the DFS traversal, each node is visited exactly once.
Visiting a single node involves appending its value to the array.
Therefore, the time complexity is O(N), where N is the number of nodes in the BST.
Space Complexity:

In the provided solution, an array array is used to store the values of the nodes in sorted order.
The size of the array will be equal to the number of nodes in the BST.
Therefore, the space complexity of the solution is also O(N), where N is the number of nodes in the BST.
In summary:

Time Complexity: O(N)
Space Complexity: O(N)
This solution provides a straightforward approach to find the kth smallest element in a BST but requires extra space to store the sorted values of the nodes.

// solution 3

// create array and return kth index

var kthSmallest = function(root, k) {
    let arr = []
    inOrder(root, arr)
    return findKthSmallest(arr, k)
};

// create inOrder function to populate array
function inOrder(root, arr) {
    if (root === null) return
    inOrder(root.left, arr)
    arr.push(root.val)
    inOrder(root.right, arr)
}

// create function to return kth index
function findKthSmallest(arr, k) {
    return arr[k - 1]
}
