 // Use DFS to add values to an array
// Return the kth index of that array
var kthSmallest = function(root, k) {
    const values = []

    // DFS function
    function dfs(root, values) {
        if(root.left) dfs(root.left, values)
        values.push(root.val)
        if(root.right) dfs(root.right, values)
    }

    // Run dfs and populate array of values
    dfs(root, values)

    return values[k-1]
};

// solution 2

var kthSmallest = function(root, k) {
    let array = []
    dfs(root)
    return array[k - 1]

    function dfs(root){
        if(!root){
            return
        }
        dfs(root.left)
        array.push(root.val)
        dfs(root.right)
    }
};

// solution 3

// create array and return kth index

var kthSmallest = function(root, k) {
    let arr = []
    inOrder(root, arr)
    return findKthSmallest(arr, k)
};

// create inOrder function to populate array
function inOrder(root, arr) {
    if (root === null) return
    inOrder(root.left, arr)
    arr.push(root.val)
    inOrder(root.right, arr)
}

// create function to return kth index
function findKthSmallest(arr, k) {
    return arr[k - 1]
}
