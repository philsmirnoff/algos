124. Binary Tree Maximum Path Sum
Hard

14663

658

Add to List

Share
A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.



Example 1:


Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxPathSum = function(root) {
    // Initialize a global variable to store the maximum path sum
    let maxSum = Number.NEGATIVE_INFINITY;

    // Helper function to calculate the maximum path sum recursively
    const maxPathSumHelper = function(node) {
        if (node === null) {
            return 0;
        }

        // Recursively calculate the maximum path sum for the left and right subtrees
        const leftSum = Math.max(maxPathSumHelper(node.left), 0);
        const rightSum = Math.max(maxPathSumHelper(node.right), 0);

        // Update the maximum path sum if the current path is greater
        maxSum = Math.max(maxSum, node.val + leftSum + rightSum);

        // Return the maximum sum that can be extended from the current node
        return node.val + Math.max(leftSum, rightSum);
    };

    // Start the recursive traversal from the root
    maxPathSumHelper(root);

    // Return the maximum path sum
    return maxSum;
};
