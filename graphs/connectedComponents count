given adjacent list of nodes we need to find the amount of connected components
for that we will initilize var count to zero
the trick here is to use standard dfs or bfs traversal and iterative code
first we will list out all our list nodes
an iterate through all the list of this node in this list
nodes:
1            1 --- 2
2
3               4
4               |
5         5 ----6 --- 8
6               |
7               7
8         1

starting at one, continue traversal as far as possible, and mark all nodes as visited to avoid loops it also ensure that we double any components here. once i hit that node 2, I ve actually completed this full component, there is nowhere else I can explore, I shoul increment count by 1. Whenever i Complete traversal on the some region of the graph I need to increment my count.
Now i have to come back to my node iteration, we get to the node 2 and we can see that it is visted and no need to traverse.
we start from 3 and marked it as visited and increment count by 1, now count is 2
we continue from 4 - 6 - 5 -8 -7, and increment by count 3.


write a function, connectedComponentCount, that takes in the adjasency list of an undirected graph. The function should return the number of connected components within the graph.

connectedComponentsCount({
  0: [8, 1, 5],
  1: [0],
  5: [0, 8],
  8: [0, 5],
  2: [3, 4],
  3: [2, 4],
  4: [3, 2]
})

// explanation: use set for keeping track of visited nodes,
// count variable to increment when trasversing function returns true
// and iterate through all nodes in the graph using for (let node in graph) and explore function keep track of visited nodes that takes current node and graph as arguments.
const connectedComponentsCount = (graph) => {
  <!-- // 3 we need to mark visited nodes as visited using set() it offers O(1) look up and addition, we need to add visitied to all our recursive calls -->
  const visited = new Set();

  <!-- //7. create count -->
  let count = 0;

  <!-- //1. we need to begin traversal in evry potential node
  // 6. we want to use in because ts give object and it would give me each of these keys like 0, 1, 5 -->
  for (let node in graph) {
    // i want this function to do node traversal as far as possible
    <!-- first version at the beginning , now we need updated, if its exploring new component it should return true explore(graph, node, visited); and we need to increment count -->
    if (explore(graph, neighbor, visited) === true) {
      count++
    }
  }
  return count
}

const explore = (graph, current) => {
  <!-- // 4 lets mark visted nodes and add new nodes to visited -->
  <!-- 8. string all the numbers --->
  if (visited.has(String(current))) return false;
  visited.add(String(current))
  <!-- // 2. iterate through every neighbour of this node -->
  for (let neighbour of graph[current]) {
    explore(graph, neighbor, visited);
  }

  <!-- // 5. whenever it explores new node return true, to get to return true explore function must finish exploring all the neighbors, that means we explore all the components as far as possible -->
  return true
}
// Better explanation;
const connectedComponentsCount = (graph) => {
  //2.2 add javascript set O(1) look up and addition, add visited
  // to all recursive calls
  const visited = new Set();
  let count = 0
  // 1. we will start traversing in every potential node
  // starting from that node as far as possible
  for (let node in graph) {
    // explore(graph, node, visited) =-> fist version
    // 3. if explore funnction will return true, that means its a new componet,
    // we will increment the coount
    if (explore(graph, node, visited) === true) {
      count++;
    }
  }
  return count;
};

// 2. time to create explore function that
//will take graph and current node;
const explore = (graph, current, visited) => {
   //2.3 and mark visited nodes and add new nodes to visited
if (visited.has(String(current))) return false;
    // 4. convert the data into strings o get consistent types of data
    visited.add(String(current));
  //2.1 iterate through every neighbor of this node
 for (let neighbor of graph[current]) {
   explore(graph, neighbor, visited)
  }
// 2.4 explore function will return true,
//whenever it explore all the component's neighbor as far as possible
return true
}
