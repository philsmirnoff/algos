longest path
Write a function, longestPath, that takes in an adjacency list for a directed acyclic graph. The function should return the length of the longest path within the graph. A path may start and end at any two nodes. The length of a path is considered the number of edges in the path, not the number of nodes.

test_00:
const graph = {
  a: ['c', 'b'],
  b: ['c'],
  c: []
};

longestPath(graph); // -> 2


const largestComponent = (graph) => {
  const visited = new Set();
    let largest = 0;


    for (let node in graph) {
      const size = exploreSize(graph, node, visited);
      if (size > largest) largest = size;
    }
    return largest;
  }

  const exploreSize = (graph, node, visited) => {
    if (visited.has(node)) return 0;
    visited.add(node);

    let size = 1;
    for (let neighbor of graph[node]) {
      size += exploreSize(graph, neighbor, visited)
    }
    return size;
  }

  n = number of nodes
e = number edges
Time: O(e)
Space: O(n)
