1905. Count Sub Islands
Medium

1781

53

Add to List

Share
You are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). An island is a group of 1's connected 4-directionally (horizontal or vertical). Any cells outside of the grid are considered water cells.

An island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2.

Return the number of islands in grid2 that are considered sub-islands.



Example 1:


Input: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
Output: 3
Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.
The 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands.


var countSubIslands = function(grid1, grid2) {
    let subIslandsCount = 0;
    const m = grid2.length;
    const n = grid2[0].length;

    // Depth-First Search (DFS) function to traverse the grid
    const dfs = (grid1, grid2, i, j) => {
        // Check if indices are out of bounds or if the current cell is water (0)
        if (
            i < 0 ||
            j < 0 ||
            i >= m ||
            j >= n ||
            grid2[i][j] === 0
        ) {
            return true; // Return true to terminate the DFS traversal
        }

        let isSubIsland = true;

        // Check if the current cell is land (1) in grid1
        if (grid1[i][j] === 0) {
            isSubIsland = false; // Set isSubIsland to false if the current cell is not land in grid1
        }

        grid2[i][j] = 0; // Mark the current cell as visited in grid2

        // Recursive DFS calls for neighboring cells
        isSubIsland &= dfs(grid1, grid2, i + 1, j); // Down
        isSubIsland &= dfs(grid1, grid2, i - 1, j); // Up
        isSubIsland &= dfs(grid1, grid2, i, j + 1); // Right
        isSubIsland &= dfs(grid1, grid2, i, j - 1); // Left

        return isSubIsland; // Return whether the current cell is part of a sub island
    };

    // Traverse each cell in grid2
    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            if (grid2[i][j] === 1) {
                // If the current cell is land in grid2, perform DFS
                if (dfs(grid1, grid2, i, j)) {
                    subIslandsCount++; // Increment the subIslandsCount if a sub island is found
                }
            }
        }
    }

    return subIslandsCount; // Return the total count of sub islands
};
