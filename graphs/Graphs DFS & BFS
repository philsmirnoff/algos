dfs graph traversal

const depthFirstPrint = (graph, source) => {
  // initialize stack to the source
  const stack = [ source ]

  // while stack is not epmty, we will loop over graph and keep adding nodes to the stack and popping the element from the stack last in first out
  while (stack.length > 0) {
    const curr = stack.pop()
    // lets find the neighbors of the current, we need to iterate through it
   for (let neighbor of graph[current]) {
     // let push all the neighbours at the top of the stack
     stack.push(neighbor)
     }
  }
}


// recursive dfs

const depthFirstPrint = (graph, source) => {
  for (let neighbor of graph[source]) {
    depthFirstPrint(graph, neighbor);
  }
}


// breadth first search

const breadthFirstPrint = (graph, source) => {
  let queue = [ source ]

  while (queue.length > 0) {
    let curr = queue.shift()

    for (let neighbor of graph[source]) {
      queue.push(neighbor)
    }
  }
}



// graph //
const graph = {
  a: ['b', 'c'],
  b: ['d'],
  c: ['e'],
  d: ['f'],
  e: [],
  f: []
}
