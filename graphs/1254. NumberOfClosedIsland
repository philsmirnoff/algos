1254. Number of Closed Islands
Medium

4207

140

Add to List

Share
Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.



Example 1:



Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation:
Islands in gray are closed because they are completely surrounded by water (group of 1s).
/**
 * @param {number[][]} grid
 * @return {number}
 */
var closedIsland = function(grid) {
    // initilize count to 0
    let count = 0;
//   loop over the grid and increment count if the grid[r,c] === 0 && dfs function called on it neighbours return true
    for (let r = 0; r < grid.length; r++) {
        for (let c = 0; c < grid[0].length; c++) {
            if (grid[r][c] === 0) {
                count += dfs(grid, r, c)
            }
        }
    }
  return count
};

const dfs = (grid, row, col) => {
    if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length ) {
        return 0
    }
    if ((grid[row][col]) === 1) return 1
    grid[row][col] = 1

    let top = dfs(grid, row + 1, col)
    let bottom = dfs(grid, row - 1, col)
    let right = dfs(grid, row, col + 1)
    let left = dfs(grid, row, col - 1)

    if (top + bottom + left + right === 4) return 1

    return 0
}


// call dfs function, check if the it in bounds,
// mark the cell as visited
// call on it neighbours top bottom left right
// if all sides return true, that means it surrounded by 1, then it increases count
// if not, then count stays same
