133. Clone Graph
Medium

5761

2531

Add to List

Share
Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}


Test case format:

For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.

An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.



Example 1:


Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.
1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
Example 2:


Input: adjList = [[]]
Output: [[]]
Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.
Example 3:

Input: adjList = []
Output: []
Explanation: This an empty graph, it does not have any nodes.

/// Solution
var cloneGraph = function(node) {
    // 3.base case if node is null
    if (node === null) return null;

    // Strategy
    // clone Map<node, cloned>
    // traversed Set

    // BFS to traverse the graph (use above Set to avoid circle)
    // everytime we perocess a node, check if it is already traversed
    // for each neighbor,
    //  if not cloned, create a new node, connected the node's clone
    // push the neighbor into the queueu
    // return the cloned input node

    // 1. create hashmap and set
    const clonedMap = new Map()
    const traversed = new Set()

    // 4. create new clone of the head
    clonedMap.set(node, new Node(node.val))

    // 2 initilize queueu with starting node
    const queue = [node]
    while (queue.length > 0) {
        const head = queue.shift();

        if (traversed.has(head)) {
            continue
        }
        const clonedHead = clonedMap.get(head)

        for (let neighbor of head.neighbors) {
            if (clonedMap.has(neighbor)) {
                clonedHead.neighbors.push(clonedMap.get(neighbor))
            } else {
                const clonedNeighbor = new Node(neighbor.val)
                clonedHead.neighbors.push(clonedNeighbor)
                clonedMap.set(neighbor, clonedNeighbor)
            }
            // if its not traversed, queueu it
            if (!traversed.has(neighbor)) {
                queue.push(neighbor)
            }
        }

        traversed.add(head)
    }
    return clonedMap.get(node)

};



// Solution #2
var cloneGraph = function(node) {
    if (!node)
        return undefined;
    const cloned = new Map();
    return clone(node);
    function clone(navNode) {
        if (!cloned.has(navNode.val)) {
            const clonedNode = new Node(navNode.val, []);
            cloned.set(navNode.val, clonedNode);
            for (let neighbor of navNode.neighbors) {
                clonedNode.neighbors.push(clone(neighbor));
            }
            return clonedNode;
        } else {
            return cloned.get(navNode.val);
        }
    }
};

// Solution
var cloneGraph = function(node) {
    let map = {};

    return traverse(node);

    function traverse  (node) {
        if(!node) return node;
        if(!map[node.val]) {
            map[node.val] = new Node(node.val);
            map[node.val].neighbors = node.neighbors.map(neighbor => traverse(neighbor))
        }
        return map[node.val]
    }
};
Update
Time complexity O(n)
Space complexity O(n)


// Definition for a Node.
class Node {
    constructor(val, neighbors = []) {
        this.val = val;
        this.neighbors = neighbors;
    }
}

var cloneGraph = function(node) {
    if (!node) return null; // If the input node is null, return null

    // HashMap to store the mapping of original node to its clone
    let map = new Map();

    // Helper function to perform DFS and clone the graph
    const dfs = (node) => {
        if (map.has(node)) {
            return map.get(node); // If the node has already been cloned, return it
        }

        // Create a clone of the current node
        let clone = new Node(node.val);
        map.set(node, clone); // Store the clone in the map

        // Recursively clone all the neighbors
        for (let neighbor of node.neighbors) {
            clone.neighbors.push(dfs(neighbor)); // Add the cloned neighbor to the neighbors list
        }

        return clone;
    };

    // Start DFS from the given node
    return dfs(node);
};


Time Complexity:
The time complexity of the cloneGraph function is O(N + E), where:

N is the number of nodes in the graph.
E is the number of edges in the graph.
Explanation:

The DFS function is called for every node in the graph, and each node is visited exactly once.
For each node, we iterate over its neighbors (the adjacency list), and each edge is processed once.
Therefore, the total time complexity is proportional to the number of nodes N plus the number of edges E.
Thus, the time complexity is O(N + E).

Space Complexity:
The space complexity of the solution is O(N), where:

N is the number of nodes in the graph.
Explanation:

We use a Map to store the mapping of each node to its clone. The map will contain one entry for each node, so it requires O(N) space.
The recursion stack in the DFS function can go as deep as the number of nodes, so the maximum depth of the recursion is N. This also contributes O(N) space.
Therefore, the space complexity is O(N) due to the map and the recursion stack.

Conclusion:
Time Complexity: O(N + E) — We visit each node and edge once during the DFS traversal.
Space Complexity: O(N) — Space is used for storing the cloned nodes and the recursion stack.
