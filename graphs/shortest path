Shortest path
write a function, shortest path, that takes an array of edges for an undirected graph and two nodes nodeA, nodeB. The function should return the length of the shortest path between A nad B. Consider the length as the number of edges in the path, not the number of nodes. If there is no path between A and B return -1.

const shortestPath = (edges, nodeA, nodeB) => {
  <!-- 1.5 here is our graph -->
  const graph = buildGraph(edges);

  <!-- 3. to avoid infinite loop we have to use Set to keep track all visited nodes we have to initilized with nodeA-->
  const visited = new Set([nodeA]);

  <!-- 2. lets solve it using bfs
  // 2.1 in the queue we need to store the node and distance from this node and over time we ll be incrementing this number -->
  const queue = [[nodeA, 0]];


  while (queue.length > 0) {
    const [ node, distance ] = queue.shift()
    <!-- // 2.2 if this node is equal to nodeB then we need to return the distance,  -->
    if (node === nodeB) return distance
    <!-- 2.3 but if not we need to keep searching and tht means I need this nodes neighbours to the back of the queue and icrement the distance by 1-->
    for (let neighbor of graph[node]) {
      <!-- 3.3 check if the neighbor is not visited yet, if its not add it to the list -->
      if (!visited.has(neighbor)) {
          visited.add(neighbour);
          queue.push([neighbor, distance + 1])
      }
    }
  }
}

<!-- 1. convert edge list into adjacency list that is good for traversal -->
const buildGraph = (edges) => {
  const graph = {}

  <!-- // 1.1 iterate through the edges -->
  for (let edge of edges) {
    <!-- // 1.2 destructure -->
  const [a , b] = edge

  <!-- //1.3 we will inititlize these nodes as key for the graph object and if there is no node a in the graph, then we will initilize it to the graph and assign it to eompty array -->

  if (!(a) in graph) graph[a] = []
  if (!(b) in graph) graph[b] = []

  <!-- // 1.4 lets add neighbours to the edges -->

  graph[a].push(b)
  graph[b].push(a)
  }
 return graph

}
