https://leetcode.com/problems/meeting-rooms-ii/description/

// 1. Create arrays to store the start and end times of intervals
using map
    const starts = intervals.map(x => x[0]);
    const ends = intervals.map(x => x[1]); 
//2. Sort the arrays of start and end times in ascending order
    starts.sort((a, b) => a - b);
    ends.sort((a, b) => a - b);
// 3. Initialize variables to keep track of rooms needed and the end pointer
    let roomsNeeded = 0, e = 0;
//4 // Iterate through the start times
    for (let s = 0; s < starts.length; s++) {
        // If the current start time is greater than or equal to the current end time
        if (starts[s] >= ends[e]) {
            // Decrement the rooms needed and move the end pointer forward
            roomsNeeded--;
            e++;
        }
        // Increment the rooms needed for the current start time
        roomsNeeded++;
    }

    // Return the final count of rooms needed
    return roomsNeeded;
};


// Define a function named minMeetingRooms that takes a list of intervals as input
var minMeetingRooms = function(intervals) {
    // Create arrays to store the start and end times of intervals using map
    const starts = intervals.map(x => x[0]);
    const ends = intervals.map(x => x[1]);

    // Sort the arrays of start and end times in ascending order
    starts.sort((a, b) => a - b);
    ends.sort((a, b) => a - b);

    // Initialize variables to keep track of rooms needed and the end pointer
    let roomsNeeded = 0, e = 0;

    // Iterate through the start times
    for (let s = 0; s < starts.length; s++) {
        // If the current start time is greater than or equal to the current end time
        if (starts[s] >= ends[e]) {
            // Decrement the rooms needed and move the end pointer forward
            roomsNeeded--;
            e++;
        }
        // Increment the rooms needed for the current start time
        roomsNeeded++;
    }

    // Return the final count of rooms needed
    return roomsNeeded;
};


var minMeetingRooms = function(intervals) {
    const starts = intervals.map(x => x[0]);
    const ends = intervals.map(x => x[1]);

    starts.sort((a, b) => a - b);
    ends.sort((a, b) => a - b);

    let roomsNeeded = 0, e = 0;

    for(let s = 0; s < starts.length; s++) {
        if(starts[s] >= ends[e]) {
            roomsNeeded--;
            e++;
        }
        roomsNeeded++;
    }
    return roomsNeeded
};

// // Define a function named minMeetingRooms that takes a list of intervals as input
var minMeetingRooms = function(intervals) {
    // Initialize arrays to store the start and end times of intervals
    const start = [];
    const end = [];
    // Initialize variables for counting, result, and pointers
    let count = 0;
    let result = 0;
    let i = 0;
    let j = 0;

    // Iterate through each interval in the input list
    for (let val of intervals) {
        // Store the start and end times in separate arrays
        start.push(val[0]);
        end.push(val[1]);
    }

    // Sort the start and end arrays in ascending order
    start.sort((a, b) => a - b);
    end.sort((a, b) => a - b);

    // Use two pointers to iterate through the start and end arrays
    while (i < start.length) {
        // If the start time of the current meeting is less than the end time of the next meeting
        if (start[i] < end[j]) {
            // Increment the count of ongoing meetings and move the start pointer forward
            count++;
            i++;
        } else {
            // If the start time is not less than the end time, decrement the count and move the end pointer forward
            j++;
            count--;
        }

        // Update the result with the maximum of the current count and previous result
        result = Math.max(count, result);
    }

    // Return the final result, which represents the minimum meeting rooms required
    return result;
};
