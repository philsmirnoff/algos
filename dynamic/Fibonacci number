Write a function 'fib(n)' that takes in a number as an argument. The function should return the n-th number of the Fibonucci sequence.
The fisrt and 2nd snumber of the sequence, we sum the previous two.

    n: 1,2,3,4,5,6,7,8,9
fib(n):1,1,2,3,5,8,13,21,34

 const fib = (n) => {
   // the first two numbers of fibonucci sequence equal to 1.
   if (n <= 2) return 1;
   // return the sum of fibonucci number right before plus fibuncucci number 2 before.
   return fib(n - 1) + fib(n - 2);
 }
 Time O(2n); exponential
 Space 0(n); linear

 // this function works, but if we ask for fib(50) it needs to be more efficient
 // we will use memoization to store the repetetive values, dublicate subproblems for fabinacci number
 // we will use js object, keys will be arg to fn, value will be return value, and assign the memo to empty object

 const fib = (n, memo = {}) => {
   <!-- 1. lets check the existence of our memo,if the n is in the memo,  -->
   if (memo[n]) return memo[n];
   <!-- 2. if not i will calculate it and store it inside the memo and pass it to the memo inside that calls so they refer to the same object -->
   if (n <= 2) return 1;
   memo[n] = fib(n - 1, memo) + fib(n - 2, memo)
   return memo[n]

 }

 Time complexity O(n);
 Space complexity O(n)
