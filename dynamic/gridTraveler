Grid Treveler
Say that you are traveler on a 2D grid. You begin in the top-left corner and your goal is to travel to the bottom-right corner. You only move donq or right.

In how many ways can you travel to the goal on a grid with dimensions m * n?

Write the function 'gridTraveler(m, n)' that calculates this.

const gridTraveler = (m, n) => {
  // 1. base case
  if (m === 1 && n === 1) return 1;
  if (m === 0 || n === 0) return 0;
  return gridTraveler(m - 1, n) + gridTraveler(m, n - 1)
}
time complexity O(2n+m) exponential
space complexity is the height of the tree O(n + m)


we can optimize solution by using memoization technique
const gridTraveler = (m, n, memo = {}) => {
  // are the args in the memo
  let key = m + ',' + n
  if (key in memo) return memo[key];
  // 1. base case
  if (m === 1 && n === 1) return 1;
  if (m === 0 || n === 0) return 0;
  memo[key] = gridTraveler(m - 1, n, memo) + gridTraveler(m, n - 1, memo)
  return memo[key]
}


Time Complexity O(m * n)
Space complexity O(m + n)

