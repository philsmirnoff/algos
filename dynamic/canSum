Write a function 'canSum(targetSum, numbers)' that takes in a targetSum and an array of number as an argument

The function should return a boolean indicating wjether or not it is possible to generate the targetSum using numbers from the array
You may use an element of the array as many times as neededd
You may assume that all input numbers are nonnegative.

canSum(7, [5, 3, 4, 7]) -> true
canSum(7, [2, 4]) -> false


const canSum = (targetSum, nums) => {
  if (targetSum === 0) return true;
  if (targetSum < 0) return false;
  for (let num of numbers) {
    const remainder = targetSum - num;
    if (canSum(remainder, numbers) === true) {
      return true;
    }
  } return false
}

Time Complexity O(n of m)
Space complexity O (m)

// we use the memoization for caching the dublicate reslts of recursive call
const canSum = (targetSum, nums, memo = {}) => {
  if (targetSum in memo) return true
  if (targetSum === 0) return true;
  if (targetSum < 0) return false;
  for (let num of numbers) {
    const remainder = targetSum - num;
    if (canSum(remainder, numbers, memo) === true) {
      memo[targetSum] = true;
      return true;
    }
  }
  memo[targetSum] = false;
  return false
}

Time complexity: O(m * n)
Space complexity: O(m);
