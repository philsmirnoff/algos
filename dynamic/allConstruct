Write a function allConstruct(target, wordBank) that accepts a target string and an array of strings.
That function should return 2D array containing all of the ways that the target can be constructed by concatenating elements of the wordBank array.Each element of the 2D array should represent one combination that constructs the target.


allConstruct(purple, [purp, p, ur, le, purpl ])

[
  [ purp, le ],
  [p, ur, p, le]
]


const allConstruct = (target, wordBank) => {
  if (target === '') return [[]];

  const result = [];
  for (let word of wordBank) {
    if (target.indexOf(word) === 0) {
      const remainder = target.slice(word.length);
      const combinations = allConstruct(remainder, wordBank);
     const targetWays = combinations.map(combination => [word, ...combination]);
     result.push(...targetWays);
    }
  }
  return result;
}
m = target.length;
n = wordBank.length;
Time complexity: O(n^m) exponential;
Space complexity: O(m) exponential;


2. Memoization =

const allConstruct = (target, wordBank, memo = {}) => {
  if (target === '') return [[]];
  if (target in memo) return memo[target];

  const result = [];
  for (let word of wordBank) {
    if (target.indexOf(word) === 0) {
      const remainder = target.slice(word.length);
      const combinations = allConstruct(remainder, wordBank, memo);
     const targetWays = combinations.map(combination => [word, ...combination]);
     result.push(...targetWays);
    }
  }
  memo[target] = result;
  return result
}
